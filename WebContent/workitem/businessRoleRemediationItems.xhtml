<!DOCTYPE html PUBLIC
  "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<!-- (c) Copyright 2008 SailPoint Technologies, Inc., All Rights Reserved. -->

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:a4j="http://richfaces.org/a4j"
    xmlns:f="http://java.sun.com/jsf/core"
      xmlns:sp="http://sailpoint.com/ui"
      xmlns:c="http://java.sun.com/jstl/core" 
      xmlns:h="http://java.sun.com/jsf/html">
<body>

<ui:composition>


    <sp:script>
      <src>#{base.requestContextPath}/scripts/sailpoint/component/StateProvider.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/grid/SelectionCollection.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/grid/CheckboxSelectionModel.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/grid/PagingGrid.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/grid/PagingCheckboxGrid.js?#{debug.revision}</src>
    </sp:script>

    <script type="text/javascript">
      <!--//--><![CDATA[//><!--

        var sp = new SailPoint.state.StateProvider({
          stateIds: ['#{workItem.gridState.name}'],
          states:   ['#{workItem.gridState.state}']
        });
        Ext.state.Manager.setProvider(sp);
        
        var workItemsGrid;
        Ext.onReady(function(){
            Ext.QuickTips.init();
            var gridWidth = $('workItems-grid').clientWidth;
            // data store
            // should always be BusinessRole if we are using this one. 
            var entityType = "BusinessRole";
            var columnConfig = #{remediationItemList.businesRoleColumnJSON};
            workItemsStore = new Ext.data.Store({
                fields : columnConfig.fields,
                autoLoad: false,
                proxy : {
                    url: CONTEXT_PATH + '/workitem/businessRoleRemediationsDataSource.json?' + 
                                    'workItemId=#{workItem.object.id}&entityType=' + entityType,
                    type : 'ajax',
                    reader : {
                        type : 'json',
                        root: 'objects',
                        totalProperty: 'count'
                    },
                    simpleSortMode : true
                },
                sorters: [{property: 'remediationIdentity', direction: 'ASC'}],
                remoteSort: true
            });

            // display models
            var sm = new Ext.selection.RowModel({});              
 
            // workItems grid
            var workItemsGridConfig = {
                id: 'workItemsGrid',
                stateId: '#{workItems.gridState.name}',
                stateful: true,
                cls:'wrappingGrid',
                store: workItemsStore,
                gridMetaData: columnConfig,
                viewConfig : {stripeRows: true},
                width: gridWidth
            };

            if (#{workItem.editable}) {
              workItemsGridConfig.selModel =  new SailPoint.grid.CheckboxSelectionModel({noPaging : true, selectMessageBox: $('selectedCount')});
              workItemsGrid = new SailPoint.grid.PagingCheckboxGrid(workItemsGridConfig);
            } else {
              workItemsGridConfig.selModel = sm;
              workItemsGrid = new SailPoint.grid.PagingGrid(workItemsGridConfig);
            }
                    
            // one day I'll figure out why the listeners property freaks out sometimes...
            workItemsGrid.addListener('itemclick', clickRow);      
            workItemsGrid.addListener('itemcontextmenu', showContextMenu);      
            
            // setting the renderTo in the config ends up with a double render
            // if you have to convert to a checkbox grid ;)
            workItemsGrid.render('workItems-grid');                      
            workItemsStore.load({params:{start:0, limit:20}});    
        }); // Ext.onReady

                
        function showContextMenu(gridView, record, HTMLitem, index, e, eOpts){
            id = record.getId();
            name = record.get('name');
            
            var contextMenu = new Ext.menu.Menu();
            contextMenu.add(new Ext.menu.Item({text: '#{sp:escapeJavascript(msgs.workitem_action_view)}', 
                                               handler: viewHandler, 
                                               iconCls: 'viewDetailsBtn'}));
            if (#{workItem.editable}) {                               
                contextMenu.add(new Ext.menu.Item({text: '#{sp:escapeJavascript(msgs.menu_complete)}', 
                                                   handler: completeRemediationItem, 
                                                   iconCls: 'editBtn'}));
            }
              
            e.stopEvent();
            contextMenu.showAt(e.xy);
        }  
    
        function clickRow (gridView, record, HTMLitem, index, e, eOpts) {
            var colName = gridView.getHeaderCt().getHeaderAtIndex(gridView.clickedColumn).dataIndex;
            if(colName) {          
                viewItem(record.getId());
            } else {
                // if a checkbox was clicked
                e.stopEvent();
            }
        }
        
        function viewHandler() {
            viewItem(id);
        }
            
        function viewItem(editId) {
            remediationId = editId;
            $('editForm:a4jViewRemediationItemBtn').click();
        }
    
        function completeRemediationItem() {
            addRemediationItemComment(id, 'editForm:completeRemediationItemBtn', 
                '#{sp:escapeJavascript(msgs.button_complete)}', '#{sp:escapeJavascript(msgs.dialog_title_complete_remed)}');
        }

        function bulkCompleteRemediations(errorDiv) {
            if ((!workItemsGrid.selModel.isAllSelected()) && (workItemsGrid.selModel.getSelectedIds().length < 1)) {
                errorDiv.innerHTML = "<div class='formError'> #{msgs.err_at_least_one_remed_required} </div>";
                errorDiv.style.display='';           
                return;
            }
            else {
                // Click the a4j button to save the work item page in the
                // navigation history before popping up the comments window.
                $('editForm:a4jBulkRemediateItemsBtn').click();
            }
        }
      


      //--><!]]>
    </script>

  <a4j:commandButton id="a4jViewRemediationItemBtn"
                     actionListener="#{workItem.saveNavigationHistoryActionListener}"
                     oncomplete="viewRemediationItem(remediationId, #{not workItem.editable})"
                     style="display: none" />

  <a4j:commandButton id="a4jBulkRemediateItemsBtn"
                     actionListener="#{workItem.saveNavigationHistoryActionListener}"
                     oncomplete="bulkCompleteRemediationItems('#{workItem.object.id}', workItemsGrid.selModel)"
                     style="display: none" />

  <div style="margin:5px">
    <div id="workItems-grid" class="width100"></div>
    
    <ui:fragment rendered="#{workItem.editable}">
    <table class="dashTable width100 spTable">
      <tr>
        <td style="white-space: nowrap" width="20%">
          <input type="button" onclick="bulkCompleteRemediations($('selectedCount')); return false;" 
            value="#{msgs.button_mark_remeds_complete}" id="bulkRemediationBtn" class="secondaryBtn"/>
        </td>
        <td>
          <div style="display: none; width: 100%;" id="selectedCount"></div>
        </td>
      </tr>
    </table>
  </ui:fragment>
  </div>

  

</ui:composition>

</body>
</html>
