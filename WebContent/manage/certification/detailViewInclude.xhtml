<!DOCTYPE html PUBLIC
        "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<!-- (c) Copyright 2008 SailPoint Technologies, Inc., All Rights Reserved. -->

<html
        xmlns="http://www.w3.org/1999/xhtml"
        xmlns:sp="http://sailpoint.com/ui"
        xmlns:t="http://myfaces.apache.org/tomahawk"
        xmlns:a4j="http://richfaces.org/a4j"
    xmlns:ui="http://java.sun.com/jsf/facelets"
        xmlns:c="http://java.sun.com/jstl/core"
        xmlns:f="http://java.sun.com/jsf/core"
        xmlns:h="http://java.sun.com/jsf/html">
<body>

<ui:composition>

    <style>
        /*
         This is applied to the comments column in the 'View History' grid
         so that the text will wrap rather than begin truncated.
        */
    .x-grid-col-comments {
        white-space: normal;
        padding-right: 20px;
    }

    .x-grid-row{
        border-style:none;
    }

    .x-grid-cell{
        border-top: 1px solid #eee;
    }

    </style>
    
    <sp:style serveOffset="#{base.requestContextPath}/css/sailpoint/component">
      <src>cert-statusor.css</src>
      <src>decision-button-group.css</src>
      <src>image-radio.css</src>
    </sp:style>        
    <sp:style serveOffset="#{base.requestContextPath}/css/sailpoint/web/manage/certification">
      <src>certification.css</src>
    </sp:style>
    <sp:style serveOffset="#{base.requestContextPath}/css/sailpoint/web/define/roles">
      <src>roles.css</src>
    </sp:style>
    
    <sp:script>
      <src>#{base.requestContextPath}/scripts/sailpoint/certification/CertificationIdentityMenu.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/model/Decision.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/model/CertificationItem.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/form/PanelField.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/Date.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/grid/SelectionCollection.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/grid/CheckboxSelectionModel.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/grid/PageSizePlugin.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/grid/PagingGrid.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/grid/PagingCheckboxGrid.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/component/StateProvider.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/Suggest.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/MultiSuggest.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/component/AssignmentForm.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/component/ImageRadio.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/component/Pager.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/component/TemplateWithTooltips.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/templates/EntitlementsTemplate.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/component/RoleDetailPanel.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/data/RestJsonStore.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/form/ComboBox.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/form/ManagedAttributeValueCombo.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/form/HtmlEditor.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/form/HtmlEditorCounterPlugin.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/form/MultiLanguageHtmlEditor.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/expandingPanel.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/accountGroup.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/workItem.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/certification/CertificationItemSecondPass.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/certification/IdentityDetailPanel.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/certification/IdentityHistoryPanel.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/web/manage/certification/Certification.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/grid/SelectionCriteria.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/certification/BaseDecisionDialog.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/certification/MitigationDialog.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/certification/RemediationDialog.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/certification/CommentsDialog.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/certification/ViolationRemediationDialog.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/certification/AccountOpConfirmationDialog.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/component/TemplateRenderer.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/certification/MitigationDialog.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/certification/DelegationDialog.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/certification/DelegationRevocationDialog.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/certification/AssignedRoleRemediationDialog.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/certification/ChallengeDialog.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/certification/DelegationReviewDialog.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/certification/MissingRequiredRolesDialog.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/certification/CreateRoleDialog.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/certification/DependantDecisionConfirmationDialog.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/model/CertificationItem.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/web/manage/certification/Decider.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/web/manage/certification/LockedCertHandler.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/component/DecisionButtonGroup.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/component/DecisionMenu.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/grid/RowExpander.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/web/certification/CertificationItemExpander.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/component/NameWithTooltip.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/certification/BaseCertificationGrid.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/component/CertificationStatusor.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/certification/CertificationItemMenu.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/certification/EntityDetailPanel.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/data/RestJsonStore.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/web/manage/policyViolations/policyViolationDetails.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/web/manage/certification/DetailView.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/form/PanelField.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/form/LinkAttributeValueSuggest.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/certification/RemediationEditor.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/grid/Utils.js?#{debug.revision}</src>
    </sp:script>


    <script type="text/javascript">
        <!--//--><![CDATA[//><!--
        helpKey = 'CERTIFICATION_DETAIL';

        SailPoint.CertificationId = '#{entityBean.certificationId}';
        SailPoint.WorkItemId = '#{entityBean.workItemId}';
        if (SailPoint.WorkItemId == '')
            SailPoint.WorkItemId = null;

        SailPoint.CurrentEntityDetails = {
            entityId:'#{entityBean.entityId}',
            type:"#{entityBean.type}",
            certType:"#{entityBean.certType}",
            continuous: #{entityBean.continuous},
            delegationDesc: "#{entityBean.defaultDelegationDescription}",
            remediationDesc: "#{entityBean.defaultRemediationDescription}",
            workItemId:SailPoint.WorkItemId,
            itemId: '#{entityBean.certificationItemId}',
            itemType: '#{entityBean.certificationItemType}',
            activeDelegations : #{entityBean.activeDelegations},
            savedDecisionCount : #{entityBean.savedDecisionCount},
            custom1: "#{entityBean.custom1}",
            custom2:"#{entityBean.custom2}",
            currentDelegationOwner: '#{sp:escapeJavascript(entityBean.currentDelegationOwner)}',
            customMap:#{entityBean.customMapJson},
            hasInstances: #{entityBean.hasInstances},
            showApp: #{entityBean.showApp},
            loggedInUser: '#{sp:escapeJavascript(entityBean.loggedInUserName)}'
        };

        SailPoint.certificationConfig = {
            certificationId:'#{entityBean.certificationId}',
            limitReassign : #{entityBean.limitReassign},
            type:"#{entityBean.certType}",
            granularity : "#{entityBean.granularity}",
            editable : #{entityBean.editable},
            defaultMitigationExpiration:#{entityBean.defaultMitigationExpiration},
            buttonsDisabled : #{!(entityBean.editable) or (null != certificationView.signedOff)},
            allowToolTips : #{sp:getSystemConfigurationValue('showCertificationIconTooltips', false)},
            actionsRequiringComments: #{entityBean.actionsRequiringComments},
            showCheckboxes : #{entityBean.editable and (!certificationView.signedOff)},
            workItemId:SailPoint.WorkItemId, // this is used when we're in a delegation and is passed with the decisions
            mode:'detail',
            pageSize: #{entityBean.gridState.pageSize},
            backForSignoff : true,
            mitigationDialogEnabled: #{entityBean.mitigationDialogEnabled},
            defaultRevoker: '#{entityBean.defaultRevoker}',
            showRemediationDialog : #{entityBean.showRemediationDialog},
            showEntitlementDescriptions : #{entityBean.displayEntitlementDescription},
            defaultRemediationModifiableOp: '#{sp:getSystemConfigurationValue('defaultRemediationModifiableOp', 'Modify')}',
            doSecondPass : #{entityBean.requiresSecondPass},
            defaultAccountReassignAssignee : "#{entityBean.defaultAccountReassignAssignee}"
        };

        SailPoint.gridLayouts = {
            'violations' : #{gridConfigBean.uiConfigJson['certificationDetailViolationTableColumns']}, //UIConfig.CERT_DETAIL_VIOLATIONS
            'roles' : #{gridConfigBean.uiConfigJson['certificationDetailManagerRoleTableColumns']},   //  UIConfig.CERT_DETAIL_MGR_ROLES
            'entitlements' : #{gridConfigBean.uiConfigJson['certificationDetailEntitlementsColumns']}, //UIConfig.CERT_DETAIL_ENTITLEMENT
            'entitlements-app' : #{gridConfigBean.uiConfigJson['certificationDetailAppGranularityEntitlementsColumns']}, //UIConfig.CERT_DETAIL_ENTITLEMENTS_APP_GRANULARITY
            'permissions' : #{gridConfigBean.uiConfigJson['certificationDetailAccountGroupPermissionsColumns']}, //UIConfig.CERT_DETAIL_ACCT_GRP_PERMISSIONS
            'memberships': #{gridConfigBean.uiConfigJson['certificationDetailAccountGroupMembershipsColumns']}, //UIConfig.CERT_DETAIL_ACCT_GRP_MEMBERSHIPS
            'dataowner': #{gridConfigBean.uiConfigJson['certificationDetailDataOwnerColumns']}, //UIConfig.CERT_DETAIL_DATA_OWNER
            'profiles': #{gridConfigBean.uiConfigJson['certificationDetailProfilesColumns']},  //UIConfig.CERT_DETAIL_PROFILES
            'relatedroles' : #{gridConfigBean.uiConfigJson['certificationDetailRelatedRolesColumns']}, //UIConfig.CERT_DETAIL_RELATED_ROLES
            'scopes' : #{gridConfigBean.uiConfigJson['certificationDetailScopesAndCapabilitiesColumns']} //UIConfig.CERT_DETAIL_SCOPE_AND_CAPS
        };

        // todo jfb - move this into sailpoint namespace
        function removeColumns(columnArray, columnsToRemove) {
        	var result = [];
        	
        	for (var i = 0; i < columnArray.length; ++i) {
        		var column = columnArray[i];
        		
        		if (columnsToRemove.indexOf(column.dataIndex) == -1) {
        			result.push(column);
        		}
        	}
        	
        	return result;
        };

        // todo jfb - move this into sailpoint namespace
        function trimGridLayout(name, columnsToRemove) {
        	SailPoint.gridLayouts[name].columns = removeColumns(SailPoint.gridLayouts[name].columns, columnsToRemove);
        }
        
        if (!SailPoint.CurrentEntityDetails.continuous) {
        	for (var property in SailPoint.gridLayouts) {
        		trimGridLayout(property, ['IIQ_continuous']);
        	}
        }

        // The entitlements grid uses a different column layout if granularity is application
        if (SailPoint.certificationConfig.granularity == "Application"){
            SailPoint.gridLayouts['entitlements'] = SailPoint.gridLayouts['entitlements-app'];
        }

        var additionalDecisionTypes = #{entityBean.additionalDecisions};
        for (var property in SailPoint.gridLayouts) {
            var gridConf =  SailPoint.gridLayouts[property];
            var field = gridConf.columns[0];
            field.width = 140 + (20 * additionalDecisionTypes);
        }

        SailPoint.TotalEntities = #{entityBean.entityCount};
        SailPoint.CurrentEntityIndex = #{entityBean.entityIndex};

        SailPoint.nextButtonText = "#{entityBean.nextButtonText}";
        SailPoint.prevButtonText = "#{entityBean.prevButtonText}";

        SailPoint.isEntityDelegated = #{entityBean.delegationDescriber.status["isDelegated"]};

        SailPoint.delegationStatus = #{entityBean.delegationDescriber.statusJson};

        Ext.onReady(function() {
            try{
               SailPoint.certification.initDetailView(SailPoint.certificationConfig.doSecondPass);
            } catch(err) {
                SailPoint.FATAL_ERR_JAVASCRIPT(err, "Error initializing certification detail view.");
            }
        });
        //--><!]]>

    </script>


    <!--

        Hidden form fields and buttons.

    -->

    <div style="display:none">
      <h:inputHidden id="certificationId" value="#{entityBean.certificationId}"/>
      <t:inputHidden id="selectedWorkItemId" value="#{entityBean.workItemId}" />
      <h:commandButton id="viewWorkItemButton" action="#{entityBean.viewWorkItem}" />
      <h:commandButton id="goBack" action="#{entityBean.back}" value="#{msgs.button_cancel}"/>
      <t:inputHidden id="mode" value="#{entityBean.modeString}"/>
      <input type="hidden" id="prevEntity" name="prevEntity" value="#{entityBean.prevEntity}"/>
      <input type="hidden" id="nextEntity" name="nextEntity" value="#{entityBean.nextEntity}"/>
      <t:inputHidden id="currentEntity" value="#{entityBean.entityId}"/>
      <h:commandButton id="listView" action="#{entityBean.gotoListView}" />
    </div>

    <!--

        Main Navigation Panel, displays the entity name and the Prev/Next buttons

    -->
    <c:if test="#{entityBean.workItemId == null}">

    <table id="topPanel" width="97%">
        <tr>
            <td valign="top"><div id="prevButton" style="float:left"></div></td>
            <td align="center">

                <div>
                    <div id="title" style="display:inline">

                        <h:outputFormat value="#{msgs.certifying_entity}" escape="false">
                            <f:param value="#{ sp:escapeHTML( entityBean.entityName, false ) }"/>
                        </h:outputFormat> (<span id="title-index">#{entityBean.entityIndex + 1}</span>/<span id="title-total">#{entityBean.entityCount}</span>)
                    </div>
                </div>
            </td>
            <td valign="top"><div id="nextButton" style="float:right"></div></td>
        </tr>

    </table>
    </c:if>

    <!--

        Main Panel which holds the item grids

    -->
    <div id="mainPanelWrapper" style="margin:10px;width:97%">

            <c:if test="#{entityBean.editable}">

                <div id="bulkButtonContainer">

                    <!--

                    Status area, displays the number of decisions that have not been saved

                    -->
                    <div id="statusArea" style="height:33px;float:right;margin-right:15px;margin-top:5px">
                        <div id="statusWidget"></div>
                    </div>


                    <c:if test="#{entityBean.certificationItemId == ''}">
                        <ul class="certDetailBulkButtons">
                            <c:if test="#{entityBean.allowCertificationEntityBulkApprove}">
                                <li id="bulkApproveBtn" class="buttonLinkGreen certDetailBulkBtn"><span class="certDetailBulkBtnText approveButton">#{msgs.cert_decision_approve_all}</span></li>
                            </c:if>
                            <c:if test="#{entityBean.allowCertificationEntityBulkRevocation}">
                                <li id="bulkRevokeBtn" class="buttonLinkRed certDetailBulkBtn"><span class="certDetailBulkBtnText revokeButton">#{msgs.cert_decision_remediate_all}</span></li>
                            </c:if>
                            <c:if test="#{entityBean.allowCertificationEntityBulkAccountRevocation}">
                                <li id="bulkRevokeAccountBtn" class="buttonLinkRed certDetailBulkBtn"><span class="certDetailBulkBtnText revokeAccountButton">#{msgs.cert_decision_revoke_all_accounts}</span></li>
                            </c:if>
                            <c:if test="#{entityBean.entityDelegationEnabled}">
                                <li id="bulkDelegateBtn" class="buttonLink certDetailBulkBtn"><span class="certDetailBulkBtnText delegateButton">#{msgs.cert_decision_delegate_all}</span></li>
                            </c:if>
                             <c:if test="#{entityBean.bulkUndoEnabled}">
                                <li id="bulkUndoBtn" class="buttonLink buttonLinkYellow certDetailBulkBtn"><span class="certDetailBulkBtnText undoButton">#{msgs.cert_decision_bulk_undo}</span></li>
                            </c:if>
                        </ul>
                    </c:if>

                </div>

           </c:if>


        <div style="clear:both"></div>

        <div id="messagesDiv"></div>

        <c:if test="#{entityBean.workItemId == null}">
        <div id="bulkDelegationMsg" class="certificationIdentityStatusDiv"
          style="#{(entityBean.delegationDescriber.status['description'] != null) ? '' : 'display:none'}">
          <h:graphicImage height="16" width="16" value="/images/icons/certif_rejected_16.png" title="Returned" />
          <span id="bulkDelegationMsgTxt">#{entityBean.delegationDescriber.status['description']}</span>
          <img id="bulkDelegationDecisionMenu" style="cursor: pointer" src="#{base.requestContextPath}/images/icons/certif_openmenu_enabled_16.png" />
        </div>
        </c:if>


        <div id="mainPanelDiv" style="width:100%"></div>
    </div>

    <!--

        Bottom button panel

    -->
    <div id="buttonPanel" style="margin:10px;width:97%">


         <!-- Email Help Link -->
        <ui:fragment rendered="#{base.helpContact != null}">
            <span style="float: right">
            <h:outputText value=" | "/>
            <img src="#{base.requestContextPath}/images/icons/dashboard_help_12.png"/>
            <a href="mailto:${base.helpContact}">#{msgs.email_help_link}</a>
            </span>
        </ui:fragment>

        <ui:fragment rendered="#{worksheetBean.allowEntitlementDescriptionToggle}">
            <div style="float: right;display:inline;">
                <h:outputText value=" | "/>
                <span class="entitlementDescriptions" style="margin-right:10px;display:#{entityBean.displayEntitlementDescription ? '' : 'none'}">
                     <h:graphicImage url="/images/icons/info.png"  style="vertical-align:middle"/>
                     <a href="javascript:switchEntitlementDescriptionStyle(false)">
                      <h:outputText value="#{msgs.cert_show_entitlement_value}"/>
                     </a>
                 </span>
                 <span class="entitlementValues" style="margin-right:10px;display:#{entityBean.displayEntitlementDescription ? 'none' : ''}">
                    <h:graphicImage url="/images/icons/info.png" style="vertical-align:middle"/>
                     <a href="javascript:switchEntitlementDescriptionStyle(true)">
                      <h:outputText value="#{msgs.cert_show_entitlement_desc}"/>
                     </a>
                 </span>
            </div>
        </ui:fragment>
        
        <c:if test="#{entityBean.workItemId == null}">
            <span style="float:right">
                <a class="clickable" onclick="$('editForm:listView').click()">
                    <sp:outputText value="#{entityBean.listViewLinkText}"/>
                </a>
            </span>
        </c:if>

        <c:if test="#{entityBean.workItemId == null}">
            <div id="backButton" style="float:left;margin-right:5px;display:inline-block"></div>
        </c:if>
        <div id="saveButton" style="float:left;margin-right:5px;display:inline-block"></div>
        <div id="cancelButton" style="float:left;margin-right:5px;display:inline-block"></div>

        <ui:fragment rendered="#{!entityBean.itemDelegation and entityBean.allowCreatingRolesFromCertification and roleFromCertification.canManageRoles and entityBean.editable and roleFromCertification.allowCreatingRolesFromCertification}">
            <div id="createRoleButton" style="float:left;margin-right:5px;display:inline-block"></div>
        </ui:fragment>
    </div>

    <div style="clear:both"></div>


    <!--

        Extraneous panels for things like account group popups

    -->
    <div id="accountGroupWin"></div>

    <div id="decisions"></div>

    <c:if test="#{null != certificationBeanParam.customEntityPageInclude}">
        <div id="entityClassification">
            <ui:include src="#{certificationBeanParam.customEntityPageInclude}">
              <ui:param name="certificationBeanParam" value="#{certificationBeanParam}" />
            </ui:include>
            <ui:fragment rendered="#{entityBean.editable}">
             <button type="button" onclick="SailPoint.entityClassification()">#{msgs.cert_entity_classification_button_save}</button>
            </ui:fragment>
        </div>
    </c:if>


    <div id="decisionLegend">
      <ui:include src="certificationLegend.xhtml">
         <ui:param name="showRevokeAccount" value="#{entityBean.revokeAccountAllowed and certificationView.type != 'DataOwner'}"/>
         <ui:param name="showMitigate" value="#{true}"/>
         <ui:param name="showDelegate" value="#{entityBean.showDelegateLegend}"/>
         <ui:param name="showApproveAccount" value="#{entityBean.approveAccountAllowed}"/>
         <ui:param name="showAccountReassign" value="#{entityBean.allowAccountReassign}"/>
         <ui:param name="showActionRequired" value="true"/>
       </ui:include>
      </div>


</ui:composition>

</body>
</html>
