<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">

<!-- (c) Copyright 2008 SailPoint Technologies, Inc., All Rights Reserved. -->

<!--
  Initialization file for new SailPoint repositories.
-->
<sailpoint>

    <ImportAction name='include' value='WEB-INF/config/reportTasksCommon.xml'/>
    <ImportAction name='include' value='WEB-INF/config/archiveReports.xml'/>

    <TaskDefinition name="User Activity Report" executor="sailpoint.reporting.LiveReportExecutor"
                    resultAction="Rename" progressMode="Percentage" subType="Activity Reports"
                    template="true" type="LiveReport">
        <Description>Displays information about user activity on each application in detailed format.</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessApplicationActivityReport"/>
        </RequiredRights>
        <Attributes>
          <Map>
            <entry key="report">
              <value>
                <LiveReport title="User Activity Report">
                  <ReportForm>
                      <Reference class="sailpoint.object.Form" name="User Activity Report Form"/>
                  </ReportForm>
                  <DataSource objectType="ApplicationActivity" type="Filter">
                     <QueryParameters>
                       <Parameter argument="identities" property="identityName">
                         <ValueScript>
                          <Source>
                            import sailpoint.object.*;
                            import sailpoint.api.ObjectUtil;
                            if (value != null){
                              return ObjectUtil.convertIdsToNames(context, Identity.class, value);
                            }
                            return null;
                          </Source>
                        </ValueScript>
                       </Parameter>
                       <Parameter argument="applications" property="sourceApplication">
                         <ValueScript>
                          <Source>
                            import sailpoint.object.*;
                            import sailpoint.api.ObjectUtil;
                            if (value != null){
                              return ObjectUtil.convertIdsToNames(context, Application.class, value);
                            }
                            return null;
                          </Source>
                        </ValueScript>
                       </Parameter>
                       <Parameter argument="startDate" property="timeStamp" operation="GE"/>
                       <Parameter argument="endDate" property="timeStamp" operation="LE"/>
                       <Parameter argument="target" property="target"/>
                       <Parameter argument="action" property="action" valueClass="sailpoint.object.ApplicationActivity$Action"/>
                       <Parameter argument="result" property="result" valueClass="sailpoint.object.ApplicationActivity$Result"/>
                    </QueryParameters>
                  </DataSource>
                  <Columns>
                    <ReportColumnConfig field="identity" header="rept_app_activity_col_identity" property="identityName" sortable="true"/>
                    <ReportColumnConfig field="application" header="rept_app_activity_col_app" property="sourceApplication" sortable="true"/>
                    <ReportColumnConfig field="target" header="rept_app_activity_col_target" property="target" sortable="true"/>
                    <ReportColumnConfig field="action" header="rept_app_activity_col_action" property="action" sortable="true"/>
                    <ReportColumnConfig field="result" header="rept_app_activity_col_result" property="result" sortable="true"/>
                    <ReportColumnConfig field="activityDate" header="rept_app_activity_col_date" property="timeStamp" sortable="true"/>
                  </Columns>
              </LiveReport>
            </value>
          </entry>
          </Map>
        </Attributes>
        <Signature>
            <Inputs>
                <Argument multi="true" name="applications" type="Application">
                    <Description>rept_input_app_activity_report_apps</Description>
                </Argument>
                <Argument multi="true" name="identities" type="Identity">
                    <Description>rept_input_app_activity_report_identities</Description>
                </Argument>
                <Argument multi="true" name="action" type="string">
                    <Description>rept_input_app_activity_report_action</Description>
                </Argument>
                <Argument name="target" type="string">
                    <Description>rept_input_app_activity_report_target</Description>
                </Argument>
                <Argument multi="true" name="result" type="string">
                    <Description>rept_input_app_activity_report_result</Description>
                </Argument>
                <Argument name="startDate" type="date">
                    <Description>rept_input_app_activity_report_start_date</Description>
                </Argument>
                <Argument name="endDate" type="date">
                    <Description>rept_input_app_activity_report_end_date</Description>
                </Argument>
            </Inputs>
        </Signature>
    </TaskDefinition>

    <TaskDefinition name="Access Review Signoff Live Report" executor="sailpoint.reporting.LiveReportExecutor"
                    resultAction="Rename" subType="Access Review and Certification Reports"
                    template="true" type="LiveReport" progressMode="Percentage">
        <Description>Displays information about when and by whom an access review was signed off.</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessCertificationSignoffReport"/>
        </RequiredRights>
        <Attributes>
          <Map>
              <entry key="report">
              <value>
                <LiveReport title="Certification Report">
                  <ReportForm>
                      <Reference class="sailpoint.object.Form" name="Certification Signoff Report Form"/>
                  </ReportForm>
                  <DataSource objectType="Certification" type="Filter">
                     <QueryParameters>
                      <Parameter argument="groups" property="groupDefinitionId"/>
                      <Parameter argument="tags" property="tags.id">
                        <QueryScript>
                          <Source>
                            <![CDATA[
                            import sailpoint.object.*;
                            import java.util.*;

                            if (value != null && !value.isEmpty()){
                              queryOptions.addFilter(Filter.containsAll("tags.id", value));
                            }

                            return queryOptions;
                            ]]>
                          </Source>
                        </QueryScript>
                      </Parameter>
                      <Parameter argument="certificationGroups" property="certificationGroups.id"/>
                      <Parameter argument="managers" property="manager">
                        <ValueScript>
                          <Source>
                            import sailpoint.object.*;
                            import sailpoint.api.ObjectUtil;
                            if (value != null){
                              return ObjectUtil.convertIdsToNames(context, Identity.class, value);
                            }
                            return null;
                          </Source>
                        </ValueScript>
                      </Parameter>
                      <Parameter argument="applications" property="applicationId"/>
                      <Parameter argument="creationDateStart" property="created" operation="GT"/>
                      <Parameter argument="creationDateEnd" property="created" operation="LT"/>
                      <Parameter argument="signedDateStart" property="signed"  operation="GT"/>
                      <Parameter argument="signedDateEnd" property="signed" operation="LT"/>
                      <Parameter argument="expirationDateStart" property="expiration"  operation="GT"/>
                      <Parameter argument="expirationDateEnd" property="expiration" operation="LT"/>
                      <Parameter argument="esigned" property="signOffHistory.electronicSign" valueClass="boolean">
                        <QueryScript>
                          <Source>
                            <![CDATA[
                            import sailpoint.object.*;
                            import sailpoint.api.*;
                            if (value != null && !"null".equals(value)){
                              if (value){
                                queryOptions.addFilter(Filter.eq("signOffHistory.electronicSign", true));
                              } else {
                                List filters = new ArrayList();
                                filters.add(Filter.eq("signOffHistory.electronicSign", false));
                                filters.add(Filter.isempty("signOffHistory"));
                                queryOptions.addFilter(Filter.or(filters));
                              }
                            }

                            return queryOptions;
                            ]]>
                          </Source>
                        </QueryScript>
                      </Parameter>
                      <Parameter argument="signedOff" property="signed">
                        <QueryScript>
                          <Source>
                            <![CDATA[
                            import sailpoint.object.*;
                            import sailpoint.api.*;

                            if (value != null && !"null".equals(value)){
                              if (Boolean.parseBoolean(value)){
                                queryOptions.addFilter(Filter.notnull("signed"));
                              } else {
                                queryOptions.addFilter(Filter.isnull("signed"));
                              }
                            }

                            return queryOptions;
                           ]]>
                          </Source>
                        </QueryScript>
                      </Parameter>
                     </QueryParameters>
                  </DataSource>
                  <Columns>
                    <ReportColumnConfig field="certName" header="rept_cert_signoff_cert_name" property="name" sortable="true"/>
                    <ReportColumnConfig field="certGroupName" header="rept_cert_col_cert_grp_name" property="certificationGroups.name" sortable="true"/>
                    <ReportColumnConfig field="signer" header="rept_cert_signoff_signer" property="signOffHistory.signerName" sortable="true"/>
                    <ReportColumnConfig field="signed" header="rept_cert_signoff_signoff_date" property="signOffHistory.date" sortable="true"/>
                    <ReportColumnConfig field="start" header="rept_cert_signoff_start_date" property="created" sortable="true"/>
                    <ReportColumnConfig field="due" header="rept_cert_signoff_due_date" property="expiration" sortable="true"/>
                    <ReportColumnConfig field="owner" header="rept_cert_signoff_owner" property="id" sortable="false">
                      <RenderScript>
                        <Source>
                          import sailpoint.object.*;
                          import java.util.*;
                          QueryOptions ops = new QueryOptions();
                          ops.addFilter(Filter.eq("id", value));
                          ops.addFilter(Filter.join("certifiers", "Identity.name"));
                          List names = new ArrayList();
                          List properties = new ArrayList();
                          properties.add("Identity.name");
                          Iterator iter = context.search(Certification.class, ops, properties);
                          while(iter.hasNext()){
                            names.add(iter.next()[0]);
                          }
                          return names;
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="tags" header="rept_cert_signoff_tags" property="tags.name" subQueryKey="id"/>
                    <ReportColumnConfig field="esigned" header="rept_cert_signoff_esig" property="signOffHistory.electronicSign" sortable="true">
                      <RenderScript>
                        <Source>
                          import sailpoint.web.messages.MessageKeys;

                          if (value != null)
                            return value ? MessageKeys.REPT_CERT_SIGNOFF_ESIGNED_VALUE_TRUE : MessageKeys.REPT_CERT_SIGNOFF_ESIGNED_VALUE_FALSE;

                          return MessageKeys.REPT_CERT_SIGNOFF_ESIGNED_VALUE_FALSE;
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="meaning" header="rept_cert_signoff_meaning" property="signOffHistory.text" sortable="false"/>
                  </Columns>
              </LiveReport>
            </value>
          </entry>
          </Map>
        </Attributes>
        <Signature>
            <Inputs>
                <Argument multi="true" name="tags" type="Tag"/>
                <Argument multi="true" name="applications" type="Application"/>
                <Argument multi="true" name="certificationGroups" type="CertificationGroup"/>
                <Argument multi="true" name="managers" type="Identity">
                    <Description>rept_input_cert_report_mgrs</Description>
                </Argument>
                <Argument multi="true" name="signers" type="Identity">
                    <Description>rept_input_cert_report_signers</Description>
                </Argument>
                <Argument multi="true" name="groups" type="GroupDefinition">
                    <Description>rept_input_cert_report_groups</Description>
                </Argument>
                <Argument name="creationDateStart" type="date">
                    <Description>rept_input_cert_report_create_dt_start</Description>
                </Argument>
                <Argument name="creationDateEnd" type="date">
                    <Description>rept_input_cert_report_create_dt_end</Description>
                </Argument>
                <Argument name="signedDateStart" type="date">
                    <Description>rept_input_cert_report_signed_date_start</Description>
                </Argument>
                <Argument name="signedDateEnd" type="date">
                    <Description>rept_input_cert_report_signed_date_end</Description>
                </Argument>
                <Argument name="expirationDateStart" type="date">
                    <Description>rept_input_cert_report_exp_dt_start</Description>
                </Argument>
                <Argument name="expirationDateEnd" type="date">
                    <Description>rept_input_cert_report_exp_dt_end</Description>
                </Argument>
                <Argument multi="true" name="tags" type="Tag">
                    <Description>rept_input_cert_report_tags</Description>
                </Argument>
              <Argument name="esigned" type="boolean"/>
              <Argument name="signedOff" type="boolean"/>
            </Inputs>
        </Signature>
    </TaskDefinition>

    <TaskDefinition name="Role Details Report" executor="sailpoint.reporting.LiveReportExecutor"
                    subType="Role Management Reports" resultAction="Rename" template="true"
                    type="LiveReport"  progressMode="Percentage">
        <Description>Displays information about each role in detailed format.</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessBusinessRoleReport"/>
        </RequiredRights>
        <Attributes>
          <Map>
            <entry key="report">
              <value>
                <LiveReport title="Role Details Report">
                  <ReportForm>
                      <Reference class="sailpoint.object.Form" name="Role Profiles Details Report Custom Fields"/>
                  </ReportForm>
                  <DataSource type="Filter" objectType="Bundle">
                     <QueryParameters>
                        <Parameter argument="applications" property="profiles.application.id"/>
                        <Parameter argument="type" property="type"/>
                        <Parameter argument="owners" property="owner.id"/>
                        <Parameter argument="disabled" property="disabled" valueClass="boolean"/>
                     </QueryParameters>
                  </DataSource>
                  <Columns>
                    <ReportColumnConfig field="role" header="rept_role_details_col_role" property="name" sortable="true"/>
                    <ReportColumnConfig field="owner" header="rept_role_details_col_owner" property="owner.name" sortable="true"/>
                    <ReportColumnConfig field="type" header="rept_role_details_col_type" property="type" sortable="true">
                      <RenderScript>
                        <Source>
                          <![CDATA[
                              import sailpoint.tools.Message;
                              import sailpoint.reporting.ReportingLibrary;
                              if (value != null){
                                String displayName = ReportingLibrary.getRoleTypeDisplayName(value);
                                if (displayName != null){
                                  return displayName;
                                }
                              }

                              return value;
                          ]]>
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="application" header="rept_role_details_col_apps" property="profiles.application.name" subQueryKey="id" sortable="false"/>
                  </Columns>
              </LiveReport>
            </value>
          </entry>
          </Map>
        </Attributes>
        <Signature>
            <Inputs>
                <Argument multi="true" name="applications" type="Application">
                    <Description>rept_input_biz_role_report_apps</Description>
                </Argument>
                <Argument multi="true" name="type" type="string">
                    <Description>rept_input_biz_role_report_type</Description>
                </Argument>
                <Argument filterString="capabilitiesString != &quot;null&quot;" multi="true" name="owners"
                          type="Identity">
                    <Description>rept_input_biz_role_report_owners</Description>
                </Argument>
                <Argument multi="false" name="disabled" type="string">
                    <Description>rept_input_biz_role_report_status</Description>
                </Argument>
            </Inputs>
        </Signature>
    </TaskDefinition>

    <TaskDefinition name="Role Profiles Composition Report" executor="sailpoint.reporting.LiveReportExecutor"
                   subType="Role Management Reports" resultAction="Rename" template="true" type="LiveReport">
       <Description>Displays information about the composition of each role in detailed format.</Description>
       <RequiredRights>
           <Reference class="sailpoint.object.SPRight" name="FullAccessBusinessRoleCompositionReport"/>
       </RequiredRights>
       <Attributes>
          <Map>
            <entry key="report">
              <value>
                <LiveReport title="Role Composition Report">
                  <ReportForm>
                      <Reference class="sailpoint.object.Form" name="Role Profiles Composition Report Form"/>
                  </ReportForm>
                  <DataSource type="Hql" objectType="Bundle">
                     <Query>from Bundle bundle left outer join bundle.profiles as profile left outer join profile.application application</Query>
                     <QueryScript>
                       <Source>
                          <![CDATA[
                              import sailpoint.reporting.ReportingLibrary;
                              String whereClause = "";

                              List clauseItems = new ArrayList();

                              String typeClause = ReportingLibrary.buildHqlFilter("type", "bundle.type", args);
                              if (typeClause != null)
                                clauseItems.add(typeClause);

                              String appClause = ReportingLibrary.buildHqlFilter("applications", "application.id", args);
                              if (appClause != null)
                                clauseItems.add(appClause);

                              String ownerClause = ReportingLibrary.buildHqlFilter("owners", "bundle.owner.id", args);
                              if (ownerClause != null)
                                clauseItems.add(ownerClause);

                              String disabledClause = ReportingLibrary.buildHqlFilter("disabled", "bundle.disabled", args);
                              if (disabledClause != null)
                                clauseItems.add(disabledClause);

                              String filterOption = args.containsKey("filters") ? args.get("filters") : "";
                              if (filterOption.equalsIgnoreCase("true")){
                                clauseItems.add(" profile is not null ");
                              } else if (filterOption.equalsIgnoreCase("false")){
                                clauseItems.add(" profile is null ");
                              }


                              if (!clauseItems.isEmpty()){
                                 for(String c : clauseItems){
                                    if (whereClause == ""){
                                      whereClause = " where ";
                                    } else {
                                      whereClause += " and ";
                                    }
                                    whereClause += c;
                                 }
                              }

                              return query + whereClause;
                          ]]>
                       </Source>
                     </QueryScript>
                     <QueryParameters>
                        <Parameter argument="applications" property="application.id"/>
                        <Parameter argument="type" property="type"/>
                        <Parameter argument="owners" property="owners"/>
                        <Parameter argument="disabled" property="disabled" valueClass="boolean"/>
                        <Parameter argument="filters" property="filters" excludeHqlParameter="true"/>
                     </QueryParameters>
                  </DataSource>
                  <Columns>
                    <ReportColumnConfig field="role" header="rept_role_profiles_comp_grid_col_role" property="bundle.name" sortable="true"/>
                    <ReportColumnConfig field="profileDescription" header="rept_role_profiles_comp_grid_col_profile_description" property="profile" sortable="false">
                      <RenderScript>
                        <Source>
                          <![CDATA[
                              import sailpoint.tools.Message;
                               return value != null ? value.description : Message.localize("rept_role_comp_msg_no_profiles");
                          ]]>
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="filters" header="rept_role_profiles_comp_grid_col_filters" property="profile" sortable="false">
                      <RenderScript>
                        <Source>
                          <![CDATA[
                              import sailpoint.object.*;
                              List filterStrings = new ArrayList();
                              if (value != null && value.getConstraints()  != null){
                                  for(Filter filter : value.getConstraints() ){
                                    filterStrings.add(filter.toString());
                                  }
                                }
                              return filterStrings;
                          ]]>
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="application" header="rept_role_profiles_comp_grid_col_profile_app" property="application.name" sortable="true"/>
                  </Columns>
              </LiveReport>
            </value>
          </entry>
          </Map>
       </Attributes>
       <Signature>
           <Inputs>
               <Argument multi="true" name="applications" type="Application">
                   <Description>rept_input_biz_role_report_apps</Description>
               </Argument>
               <Argument multi="true" name="type" type="string">
                   <Description>rept_input_biz_role_report_type</Description>
               </Argument>
               <Argument multi="true" name="owners" type="Identity">
                   <Description>rept_input_biz_role_report_owners</Description>
               </Argument>
               <Argument name="filters" type="string">
                   <Description>rept_input_biz_role_report_composition_exceptions</Description>
               </Argument>
               <Argument name="disabled" type="string">
                   <Description>rept_input_biz_role_report_status</Description>
               </Argument>
           </Inputs>
       </Signature>
   </TaskDefinition>

   <TaskDefinition name="Role Members Report" executor="sailpoint.reporting.LiveReportExecutor"
                   subType="Role Management Reports" resultAction="Rename" progressMode="String"
                   template="true" type="LiveReport">
       <Description>Displays information about the membership of each role in detailed format.</Description>
       <RequiredRights>
           <Reference class="sailpoint.object.SPRight" name="FullAccessBusinessRoleMembershipReport"/>
       </RequiredRights>
       <Attributes>
         <Map>
           <entry key="report">
              <value>
                <LiveReport title="Role Membership Report" disablePreview="true">
                  <DataSource objectType="Bundle" type="Java" dataSourceClass="sailpoint.reporting.datasource.RoleMembersDataSource" defaultSort="name">
                     <QueryParameters>
                      <Parameter argument="applications" property="profiles.application.id"/>
                        <Parameter argument="type" property="type"/>
                        <Parameter argument="owners" property="owner.id"/>
                        <Parameter argument="disabled" property="disabled" valueClass="boolean"/>
                     </QueryParameters>
                  </DataSource>
                  <ReportForm>
                      <Reference class="sailpoint.object.Form" name="Role Members Report Form"/>
                  </ReportForm>
                  <Columns>
                    <ReportColumnConfig field="name" header="rept_role_members_col_role_name" property="name" sortable="true"/>
                    <ReportColumnConfig field="identity" header="rept_role_members_col_identity" sortable="false"/>
                    <ReportColumnConfig field="firstname" header="rept_role_members_col_firstname" sortable="false"/>
                    <ReportColumnConfig field="lastname" header="rept_role_members_col_lastname" sortable="false"/>
                  </Columns>
              </LiveReport>
            </value>
          </entry>
         </Map>
       </Attributes>
       <Signature>
           <Inputs>
               <Argument multi="true" name="applications" type="Application">
                   <Description>rept_input_biz_role_report_apps</Description>
               </Argument>
               <Argument multi="true" name="type" type="string">
                   <Description>rept_input_biz_role_report_type</Description>
               </Argument>
               <Argument name="showEmpty" type="string">
                   <Description>rept_input_biz_role_report_member_exceptions</Description>
               </Argument>
               <Argument filterString="capabilitiesString != &quot;null&quot;" multi="true" name="owners"
                         type="Identity">
                   <Description>rept_input_biz_role_report_owners</Description>
               </Argument>
               <Argument multi="false" name="disabled" type="string">
                   <Description>rept_input_biz_role_report_status</Description>
               </Argument>
           </Inputs>
       </Signature>
   </TaskDefinition>

   <TaskDefinition name="Work Item Archive Report" executor="sailpoint.reporting.LiveReportExecutor"
                    resultAction="Rename"
                    progressMode="Percentage" subType="Administration Reports"
                    template="true" type="LiveReport">
        <Description>Displays information about all active work items.</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessWorkItemReport"/>
        </RequiredRights>
        <Attributes>
          <Map>
            <entry key="report">
                <value>
                    <LiveReport title="Work Item Archive Report" disablePreview="true">
                      <DataSource dataSourceClass="sailpoint.reporting.datasource.WorkItemArchiveDataSource"
                                  type="Java" defaultSort="name">
                          <QueryParameters>
                              <Parameter argument="levels" property="level"/>
                              <Parameter argument="types" property="type"/>
                              <Parameter argument="states" property="state"/>
                              <Parameter argument="remindersMin" property="reminders" operation="GE"/>
                              <Parameter argument="remindersMax" property="reminders" operation="LE"/>
                              <Parameter argument="owners">
                                <QueryScript>
                                  <Source>
                                    <![CDATA[
                                    import sailpoint.object.*;
                                    import sailpoint.api.*;
                                    if (value != null && !value.isEmpty()){
                                      if (arguments.get("isArchive") == true){
                                        List names = ObjectUtil.convertIdsToNames(context, Identity.class, value);
                                        queryOptions.addFilter(Filter.in("ownerName", names));
                                      } else {
                                        queryOptions.addFilter(Filter.in("owner.id", value));
                                      }
                                    }

                                    return queryOptions;
                                    ]]>
                                  </Source>
                                </QueryScript>
                              </Parameter>
                              <Parameter argument="requesters">
                                <QueryScript>
                                  <Source>
                                    <![CDATA[
                                    import sailpoint.object.*;
                                    import sailpoint.api.*;
                                    if (value != null && !value.isEmpty()){
                                      if (arguments.get("isArchive") == true){
                                        List names = ObjectUtil.convertIdsToNames(context, Identity.class, value);
                                        queryOptions.addFilter(Filter.in("requester", names));
                                      } else {
                                        queryOptions.addFilter(Filter.in("requester.id", value));
                                      }
                                    }

                                    return queryOptions;
                                    ]]>
                                  </Source>
                                </QueryScript>
                              </Parameter>
                          </QueryParameters>
                      </DataSource>
                      <ReportForm>
                        <Reference class="sailpoint.object.Form" name="Work Item Archive Report Form"/>
                      </ReportForm>
                      <Columns>
                          <ReportColumnConfig field="name" header="rept_workitems_col_id" property="name" sortable="false"/>
                          <ReportColumnConfig field="description" header="rept_workitems_col_name" property="description" sortable="false"/>
                          <ReportColumnConfig field="owner" header="rept_workitems_col_owner" property="owner" sortable="true"/>
                          <ReportColumnConfig field="requester" header="rept_workitems_col_requester" property="requester" sortable="true"/>
                          <ReportColumnConfig field="type" header="rept_workitems_col_type" property="type" sortable="true"/>
                          <ReportColumnConfig field="level" header="rept_workitems_col_level" property="level" sortable="true"/>
                          <ReportColumnConfig field="expiration" header="rept_workitems_col_expiration" property="expiration" sortable="false"/>
                          <ReportColumnConfig field="state" header="rept_workitems_col_state" property="state" sortable="true"/>
                          <ReportColumnConfig field="reminders" header="rept_workitems_col_reminders" property="reminders" sortable="true"/>
                          <ReportColumnConfig field="escalationCount" header="rept_workitems_col_escalations" property="escalationCount" sortable="true"/>
                          <ReportColumnConfig field="archiveStatus" header="rept_workitems_col_status" sortable="true"/>
                      </Columns>
                    </LiveReport>
                </value>
            </entry>
          </Map>
        </Attributes>
        <Signature>
            <Inputs>
                <Argument multi="true" name="owners" type="string">
                    <Description>rept_input_work_item_report_owners</Description>
                </Argument>
                <Argument name="expirationDate" type="date">
                    <Description>rept_input_work_item_report_exp_dt</Description>
                </Argument>
                <Argument multi="true" name="states" type="string">
                    <Description>rept_input_work_item_report_states</Description>
                </Argument>
                <Argument multi="true" name="requesters" type="Identity">
                    <Description>rept_input_work_item_report_requesters</Description>
                </Argument>
                <Argument multi="true" name="types" type="string">
                    <Description>rept_input_work_item_report_types</Description>
                </Argument>
                <Argument name="remindersMin" type="int">
                    <Description>rept_input_work_item_report_reminders</Description>
                </Argument>
                <Argument name="remindersMax" type="int">
                    <Description></Description>
                </Argument>
                <Argument name="levels" type="String">
                    <Description>rept_input_work_item_report_priority</Description>
                </Argument>
                <Argument name="statusOptions" type="String">
                    <Description>rept_input_work_item_report_status</Description>
                </Argument>
            </Inputs>
        </Signature>
    </TaskDefinition>

    <TaskDefinition name="Mitigation Report" executor="sailpoint.reporting.LiveReportExecutor"
                    resultAction="Rename"
                    progressMode="Percentage" subType="Administration Reports"
                    template="true" type="LiveReport">
        <Description>Displays information about all current mitigations in detailed format.</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessMitigationReport"/>
        </RequiredRights>
        <Attributes>
          <Map>
            <entry key="report">
              <value>
                <LiveReport title="Mitigation Report">
                  <ReportForm>
                      <Reference class="sailpoint.object.Form" name="Mitigation Report Form"/>
                  </ReportForm>
                  <DataSource objectType="MitigationExpiration" type="Filter">
                     <QueryParameters>
                      <Parameter property="identity" operation="NOTNULL"/>
                      <Parameter argument="identities" property="identity.id"/>
                      <Parameter argument="managers" property="mitigator.id"/>
                      <Parameter argument="expirationDate" operation="LT" property="expiration"/>
                      <Parameter argument="roles" property="roleName">
                        <ValueScript>
                          <Source>
                            import sailpoint.object.*;
                            import sailpoint.api.ObjectUtil;
                            if (value != null){
                              return ObjectUtil.convertIdsToNames(context, Bundle.class, value);
                            }
                            return null;
                          </Source>
                        </ValueScript>
                      </Parameter>
                    </QueryParameters>
                  </DataSource>
                  <Columns>
                    <ReportColumnConfig field="identity" header="rept_mitigations_grid_col_identity" property="identity.name" sortable="true" width="110"/>
                    <ReportColumnConfig field="mitigator" header="rept_mitigations_grid_col_mitigator" property="mitigator.name" sortable="true" width="110"/>
                    <ReportColumnConfig field="type" header="rept_mitigations_grid_col_type" property="certifiableDescriptor" sortable="true" width="110">
                      <RenderScript>
                        <Source>
                                    import sailpoint.object.*;
                                    import sailpoint.tools.Message;
                                    if (value != null){
                                        if (value.getBusinessRole() != null)
                                          return Message.localize("rept_mitigations_type_role");
                                        else if (value.getExceptionEntitlements() != null)
                                          return Message.localize("rept_mitigations_type_entitlement");
                                        else if (value.getPolicyViolation() != null)
                                          return Message.localize("rept_mitigations_type_violation");
                                    }
                                    return "";
                                  </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                   <ReportColumnConfig field="item" header="rept_mitigations_grid_col_item" property="certifiableDescriptor" sortable="true" width="110">
                      <RenderScript>
                        <Source>
                                    import sailpoint.object.*;
                                    import sailpoint.tools.Message;
                                    import sailpoint.api.EntitlementDescriber;
                                    if (value != null){
                                        if (value.getBusinessRole() != null){
                                          return value.getBusinessRole();
                                        } else if (value.getExceptionEntitlements() != null) {
                                          return EntitlementDescriber.summarize(value.getExceptionEntitlements());
                                        } else if (value.getPolicyViolation() != null) {
                                          return value.getPolicyViolation().getConstraintName();
                                        }
                                    }
                                    return "";
                         </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig dateFormat="short" field="expiration" header="rept_mitigations_grid_col_expiration" property="expiration" sortable="true" timeFormat="long" width="110"/>
                  </Columns>
              </LiveReport>
            </value>
          </entry>
          </Map>
        </Attributes>
        <Signature>
            <Inputs>
                <Argument multi="true" name="identities" type="Identity">
                    <Description>rept_input_mitigation_report_identities</Description>
                </Argument>
                <Argument filterString="capabilitiesString != &quot;null&quot;" multi="true" name="managers"
                          type="Identity">
                    <Description>rept_input_mitigation_report_mgrs</Description>
                </Argument>
                <Argument multi="true" name="roles" type="Bundle">
                    <Description>rept_input_mitigation_report_biz_roles</Description>
                </Argument>
                <Argument name="expirationDate" type="date">
                    <Description>rept_input_mitigation_report_exp_dt</Description>
                </Argument>
                <Argument name="resultScope" type="Scope">
                    <Description>rept_input_result_scope</Description>
                </Argument>
                <Argument name="emailIdentities" type="Identity" multi="true">
                    <Description>rept_input_email_recips</Description>
                </Argument>
            </Inputs>
        </Signature>
    </TaskDefinition>

   <TaskDefinition name="Policy Violation Report"
    executor="sailpoint.reporting.LiveReportExecutor" resultAction="Rename"
    progressMode="Percentage" subType="Policy Enforcement Reports"
    template="true" type="LiveReport">

    <Description>Displays information about all current policy violations in detailed format.</Description>
    <RequiredRights>
        <Reference class="sailpoint.object.SPRight" name="FullAccessViolationReport" />
    </RequiredRights>
    <Attributes>
        <Map>
            <entry key="report">
                <value>
                    <LiveReport title="Policy Violation Report">
                        <ReportForm>
                          <Reference class="sailpoint.object.Form" name="Policy Violation Report Form"/>
                        </ReportForm>
                        <DataSource objectType="PolicyViolation"
                            type="Filter">
                            <QueryParameters>
                                <Parameter argument="identities"
                                    property="identity.id" />
                                <Parameter argument="status"
                                    property="active">
                                    <ValueScript>
                                        <Source>
                                            if ("active".equals(value)){
                                              return true;
                                            }
                                            else if("completed".equals(value)) {
                                              return false;
                                            }

                                          return null;
                                        </Source>
                                    </ValueScript>
                                </Parameter>
                                <Parameter argument="policies"
                                    property="policyId" />
                                <Parameter argument="violationDate"
                                    operation="LT" property="created" />
                                <Parameter argument="actualStatus"
                                    property="status" />
                            </QueryParameters>
                        </DataSource>
                        <Chart title="rept_violations_chart_title" type="column" groupBy="status,policyName" value="count(*)" series="policyName" category="status"/>
                        <ReportSummary title="rept_cert_summary_title">
                          <Values>
                            <LiveReportSummaryValue name="total" label="rept_violations_summary_total"/>
                            <LiveReportSummaryValue name="identities" label="rept_violations_summary_identities"/>
                            <LiveReportSummaryValue name="open" label="rept_violations_summary_open"/>
                            <LiveReportSummaryValue name="mitigations" label="rept_violations_summary_mitigations"/>
                          </Values>
                          <DataSourceScript>
                            <Source>
                              <![CDATA[
                              import java.util.*;
                              import sailpoint.object.*;

                              QueryOptions ops = baseQueryOptions;

                              List fields = new ArrayList();
                              fields.add("count(*)");
                              fields.add("count(distinct identity.id)");

                              Iterator iter = context.search(PolicyViolation.class, ops, fields);

                              Map map = new HashMap();

                              if (iter.hasNext()){
                                Object[] results = iter.next();
                                map.put("total", results[0]);
                                map.put("identities", results[1]);
                              }

                              QueryOptions mitigations = new QueryOptions(baseQueryOptions);
                              mitigations.addFilter(Filter.eq("status", PolicyViolation.Status.Mitigated));
                              map.put("mitigations", context.countObjects(PolicyViolation.class, mitigations));

                              QueryOptions open = new QueryOptions(baseQueryOptions);
                              open.addFilter(Filter.eq("status", PolicyViolation.Status.Open));
                              map.put("open", context.countObjects(PolicyViolation.class, open));

                              return map;
                              ]]>
                            </Source>
                          </DataSourceScript>
                        </ReportSummary>
                        <Columns>
                            <ReportColumnConfig
                                field="firstname" header="rept_viol_grid_col_first_name"
                                property="identity.firstname" sortable="true"
                                width="110" />
                            <ReportColumnConfig
                                field="lastname" header="rept_viol_grid_col_last_name"
                                property="identity.lastname" sortable="true"
                                width="110" />
                            <ReportColumnConfig
                                field="name" header="rept_viol_grid_col_identity"
                                property="identity.name" sortable="true"
                                width="110" />
                            <ReportColumnConfig
                                field="policy" header="rept_viol_grid_col_policy"
                                property="policyName" sortable="true"
                                width="110" />
                            <ReportColumnConfig
                                field="violationOwner"
                                header="rept_viol_grid_col_violation_owner"
                                property="owner" sortable="true" width="110">
                                <RenderScript>
                                    <Source>
                                        import sailpoint.object.*;
                                        if (value != null){
                                        return value.getDisplayableName();
                                        }
                                        return "";
                                    </Source>
                                </RenderScript>
                            </ReportColumnConfig>
                            <ReportColumnConfig
                                field="rule" header="rept_viol_grid_col_rule"
                                property="constraintName" sortable="true"
                                width="110" />
                            <ReportColumnConfig
                                field="status" header="rept_viol_grid_col_status"
                                property="status"
                                scriptArguments="identity,policyName,constraintName,created"
                                sortable="true" width="110">
                                <RenderScript>
                                    <Source>
                                    <![CDATA[
                                        import sailpoint.object.*;
                                        import sailpoint.api.*;
                                        import sailpoint.tools.*;
                                        import sailpoint.web.messages.MessageKeys;
                                        import java.text.DateFormat;
                                        
                                        String identityId = scriptArgs.get("identity").id;
                                        QueryOptions ops = new QueryOptions();
                                        IdentityHistoryItem lastDecision;
                                        Message out = null;
                                        
                                        ops.addFilter(Filter.eq("identity.id", identityId));
                                        ops.addFilter(Filter.eq("type", IdentityHistoryItem.Type.Decision));
                                        if (scriptArgs.get("policyName") != null)
                                            ops.addFilter(Filter.eq("policy", scriptArgs.get("policyName")));
                                        if (scriptArgs.get("constraintName") != null)
                                            ops.addFilter(Filter.eq("constraintName", scriptArgs.get("constraintName")));
                                            
                                        ops.setOrderBy("created");
                                        ops.setOrderAscending(false);
                                        ops.setResultLimit(1);
                                        List items = context.getObjects(IdentityHistoryItem.class, ops);
                                        if (items != null && !items.isEmpty()){
                                            lastDecision = (IdentityHistoryItem)items.get(0);
                                        }
                                        if (lastDecision != null && lastDecision.getAction() != null){
                                            // if the decision was made after the last policy scan then display it. We don't want to
                                            // display old decisions, just those made for the current violation. If no decisions have been made on
                                            // the violation, display any mitigation if it is still active.
                                            if (lastDecision.getAction().getCreated().compareTo(scriptArgs.get("created")) > 0 ||
                                                    lastDecision.getAction().isMitigation()){
                                
                                                if (lastDecision.getAction().isMitigation()){
                                                    LocalizedDate[] ldate = {new LocalizedDate(lastDecision.getAction().getMitigationExpiration(), DateFormat.SHORT, null)};
                                                    out = Message.localize(MessageKeys.REPT_VIOL_GRID_STATUS_ALLOWED, ldate);
                                                } else if (lastDecision.getAction().isRemediation()){
                                                    LocalizedDate[] ldate = {new LocalizedDate(lastDecision.getAction().getCreated(), DateFormat.SHORT, null)};
                                                    out = Message.localize(MessageKeys.REPT_VIOL_GRID_STATUS_REMEDIATED, ldate);
                                                } else if (lastDecision.getAction().isAcknowledgment()){
                                                     LocalizedDate[] ldate = {new LocalizedDate(lastDecision.getAction().getCreated(), DateFormat.SHORT, null)};
                                                    out = Message.localize(MessageKeys.REPT_VIOL_GRID_STATUS_ACKNOWLEDGED, ldate);       
                                                }
                              
                                            }
                                        }
                                         
                                        if (out==null) {
                                        out = Message.localize(MessageKeys.REPT_VIOL_GRID_STATUS_OPEN);
                                        }
                                        return out.getLocalizedMessage(locale, timezone);
                                        ]]>

                                    </Source>
                                </RenderScript>
                            </ReportColumnConfig>
                            <ReportColumnConfig
                                field="summary" header="rept_viol_grid_col_summary"
                                property="description"
                                scriptArguments="rightBundles,leftBundles,policyId,policyName,constraintId,constraintName"
                                sortable="true" width="110">
                                <RenderScript>
                                    <Source>
                                    <![CDATA[
                                        import sailpoint.object.*;
                                        import sailpoint.tools.*;
                                        import java.util.*;
                                        import sailpoint.web.messages.MessageKeys;

                                        String summary = value;
                                        BaseConstraint found = null;
                                        if(summary == null) {
                                            if (( scriptArgs.get("leftBundles") != null ) && ( scriptArgs.get("rightBundles") != null)) {
                                                List leftBundles = Util.csvToList((String)scriptArgs.get("leftBundles"));
                                                List rightBundles = Util.csvToList((String)scriptArgs.get("rightBundles"));
        
                                                List[] bund = new List [] {leftBundles, rightBundles};
                                                
                                                Message msg = Message.localize( MessageKeys.POLICY_VIOLATION_SOD_SUMMARY, bund);
        
                                                summary = msg.getLocalizedMessage(locale, timezone);
                                            }
                                            else {
                                            Policy p = null;
                                            if (scriptArgs.get("policyId") != null)
                                                p = context.getObjectById(Policy.class, scriptArgs.get("policyId"));
                                            else if (scriptArgs.get("policyName") != null)
                                                p = context.getObjectByName(Policy.class, scriptArgs.get("policyName"));
                                            
         
                                            found = p.getConstraint(scriptArgs.get("constraintId"), scriptArgs.get("constraintName"));
                                            
                                            if(found != null) {
                                            
                                            summary = found.getDescription();
                                            
                                            }
                                            
                                            }
        
                                        }
                                        
                                        return summary;
                                        ]]>
                                    </Source>
                                </RenderScript>
                            </ReportColumnConfig>
                        </Columns>
                    </LiveReport>
                </value>
            </entry>
        </Map>
    </Attributes>
    <Signature>
        <Inputs>
            <Argument type="string" name="status">
                    <Description>rept_input_violation_report_status</Description>
                </Argument>
                <Argument type="string" name="actualStatus">
                    <Description>rept_input_violation_report_status</Description>
                </Argument>
                <Argument multi="true" name="identities" type="Identity">
                    <Description>rept_input_violation_report_identities</Description>
                </Argument>
                <Argument multi="true" name="businessRoles" type="Bundle">
                    <Description>rept_input_violation_report_biz_roles</Description>
                </Argument>
                <Argument multi="true" name="policies" filterString="template == false" type="Policy">
                    <Description>rept_input_violation_report_policies</Description>
                </Argument>
                <Argument multi="true" name="rules" type="SODConstraint">
                    <Description>rept_input_violation_report_rules</Description>
                </Argument>
                <Argument name="violationDate" type="date">
                    <Description>rept_input_violation_report_violation_date</Description>
                </Argument>
                <Argument name="resultScope" type="Scope">
                    <Description>rept_input_result_scope</Description>
                </Argument>
                <Argument name="emailIdentities" type="Identity" multi="true">
                    <Description>rept_input_email_recips</Description>
                </Argument>
                <Argument name="REPORT_MAX_COUNT" type="int">
                    <Description>rept_input_max_rows</Description>
                </Argument>
            </Inputs>
        </Signature>
    </TaskDefinition>
    
    <TaskDefinition name="Access Review Decision Report" executor="sailpoint.reporting.CertificationDetailReport"
                    formPath="/analyze/reports/certificationReportArgs.xhtml" resultAction="Rename"
                    progressMode="Percentage" subType="Access Review and Certification Reports"
                    template="true" type="Report">
        <Description>
            Displays information on current certifications in the systems and the decisions made by system users in detailed format.
        </Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessCertificationDecisionReport"/>
        </RequiredRights>
        <Attributes>
          <Map>
            <entry key="jasperTemplate" value="CertificationDetailReport"/>
            <entry key="handlerPageSize" value="25"/>
          </Map>
        </Attributes>
        <Signature>
            <Inputs>
                <Argument multi="true" name="applications" type="Application">
                    <Description>rept_input_cert_report_apps</Description>
                </Argument>
                <Argument multi="true" name="managers" type="Identity">
                    <Description>rept_input_cert_report_mgrs</Description>
                </Argument>
                <Argument multi="true" name="creationDateStartUse" type="boolean">
                    <Description>rept_input_cert_report_create_dt_start_use</Description>
                </Argument>
                <Argument name="creationDateStart" type="date">
                    <Description>rept_input_cert_report_create_dt_start</Description>
                </Argument>
                <Argument multi="true" name="creationDateEndUse" type="boolean">
                    <Description>rept_input_cert_report_create_dt_end_use</Description>
                </Argument>
                <Argument name="creationDateEnd" type="date">
                    <Description>rept_input_cert_report_create_dt_end</Description>
                </Argument>
                <Argument multi="true" name="signedDateStartUse" type="boolean">
                    <Description>rept_input_cert_report_signed_date_start_use</Description>
                </Argument>
                <Argument name="signedDateStart" type="date">
                    <Description>rept_input_cert_report_signed_date_start</Description>
                </Argument>
                <Argument multi="true" name="signedDateEndUse" type="boolean">
                    <Description>rept_input_cert_report_signed_date_end_use</Description>
                </Argument>
                <Argument name="signedDateEnd" type="date">
                    <Description>rept_input_cert_report_signed_date_end</Description>
                </Argument>
                <Argument multi="true" name="expirationDateStartUse" type="boolean">
                    <Description>rept_input_cert_report_exp_dt_start_use</Description>
                </Argument>
                <Argument name="expirationDateStart" type="date">
                    <Description>rept_input_cert_report_exp_dt_start</Description>
                </Argument>
                <Argument multi="true" name="expirationDateEndUse" type="boolean">
                    <Description>rept_input_cert_report_exp_dt_end_use</Description>
                </Argument>
                <Argument name="expirationDateEnd" type="date">
                    <Description>rept_input_cert_report_exp_dt_end</Description>
                </Argument>
                <Argument multi="true" name="tags" type="Tag">
                    <Description>rept_input_cert_report_tags</Description>
                </Argument>
                <Argument name="resultScope" type="Scope">
                    <Description>rept_input_result_scope</Description>
                </Argument>
                <Argument name="emailIdentities" type="Identity" multi="true">
                    <Description>rept_input_email_recips</Description>
                </Argument>
                <Argument name="REPORT_MAX_COUNT" type="int">
                    <Description>rept_input_max_rows</Description>
                </Argument>
            </Inputs>
        </Signature>
    </TaskDefinition>

    <TaskDefinition name="Application Owner Access Review Live Report" executor="sailpoint.reporting.LiveReportExecutor"
                    resultAction="Rename" subType="Access Review and Certification Reports"
                    template="true" type="LiveReport"  progressMode="Percentage">
        <Description>Displays information about all application owner certifications in detailed format.</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessApplicationOwnerCertificationReport"/>
        </RequiredRights>
        <Attributes>
          <Map>
            <entry key="report">
              <value>
                <LiveReport title="Certification Report">
                  <InitializationRule>
                    <Reference class="sailpoint.object.Rule" name="Certification Report Customizer"/>
                  </InitializationRule>
                  <ReportForm>
                      <Reference class="sailpoint.object.Form" name="Application Owner Access Review Report Form"/>
                  </ReportForm>
                  <Chart title="rept_cert_chart_title" type="column" groupBy="action.status,type" value="count(*)" series="action.status" category="type" nullSeries="cert_action_open"/>
                  <ReportSummary title="rept_cert_summary_title">
                    <Values>
                      <LiveReportSummaryValue name="certifications" label="reprt_cert_summary_total_certs"/>
                      <LiveReportSummaryValue name="accessReviews" label="reprt_cert_summary_total_access_reviews"/>
                      <LiveReportSummaryValue name="identities" label="reprt_cert_summary_total_identities"/>
                      <LiveReportSummaryValue name="items" label="reprt_cert_summary_total_items"/>
                    </Values>
                    <DataSourceScript>
                      <Source>
                        <![CDATA[
                        import java.util.*;
                        import sailpoint.object.*;

                        QueryOptions ops = baseQueryOptions;

                        List fields = new ArrayList();
                        fields.add("count(*)");
                        fields.add("count(distinct parent.id)");
                        fields.add("count(distinct parent.certification.id)");
                        fields.add("count(distinct parent.certification.certificationGroups.id)");

                        Iterator iter = context.search(CertificationItem.class, ops, fields);

                        Map map = new HashMap();

                        if (iter.hasNext()){
                          Object[] results = iter.next();
                          map.put("certifications", results[3]);
                          map.put("accessReviews", results[2]);
                          map.put("identities", results[1]);
                          map.put("items", results[0]);
                        }

                        return map;
                        ]]>
                      </Source>
                    </DataSourceScript>
                  </ReportSummary>
                  <DataSource objectType="CertificationItem" type="Java" dataSourceClass="sailpoint.reporting.datasource.CertificationLiveReportDataSource" >
                     <QueryParameters>
                      <Parameter argument="type" defaultValue="ApplicationOwner" property="parent.certification.type" valueClass="sailpoint.object.Certification$Type"/>
                      <Parameter argument="tags" property="parent.certification.tags.id"/>
                      <Parameter argument="certificationGroups" property="parent.certification.certificationGroups.id"/>
                      <Parameter argument="applications" property="parent.certification.applicationId"/>
                      <Parameter argument="createStartDate" property="parent.certification.created" operation="GT"/>
                      <Parameter argument="createEndDate" property="parent.certification.created" operation="LT"/>
                      <Parameter argument="signedStartDate" property="parent.certification.signed"  operation="GT"/>
                      <Parameter argument="signedEndDate" property="parent.certification.signed" operation="LT"/>
                      <Parameter argument="dueStartDate" property="parent.certification.expiration"  operation="GT"/>
                      <Parameter argument="dueEndDate" property="parent.certification.expiration" operation="LT"/>
                    </QueryParameters>
                  </DataSource>
                  <Columns>
                    <ReportColumnConfig field="nativeIdentity" header="rept_cert_col_account_id" property="exceptionEntitlements.nativeIdentity" sortable="true"/>
                    <ReportColumnConfig field="firstName" header="rept_cert_col_first_name" property="parent.firstname" sortable="true"/>
                    <ReportColumnConfig field="lastName" header="rept_cert_col_last_name" property="parent.lastname" sortable="true"/>
                    <ReportColumnConfig field="manager" header="rept_cert_col_manager_name" property="parent" sortable="false">
                      <RenderScript>
                        <Source>
                          import sailpoint.reporting.*;
                          return value != null ? ReportingLibrary.getCertificationItemManagerName(context, value) : null;
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="certName" header="rept_cert_col_cert_access_review" property="parent.certification.name" sortable="true"/>
                    <ReportColumnConfig field="certGroupName" header="rept_cert_col_cert_grp_name" property="parent.certification.certificationGroups.name" sortable="true"/>
                    <ReportColumnConfig field="tags" header="rept_cert_col_tags" property="parent.certification.tags.name" subQueryKey="id"/>
                    <ReportColumnConfig field="entitlementType" header="rept_cert_col_entitlement_type" property="type" sortable="true"/>
                    <ReportColumnConfig field="entitlements" header="rept_cert_col_entitlement_desc" property="exceptionEntitlements" scriptArguments="bundle,violationSummary" sortable="false">
                      <RenderScript>
                        <Source>
                          import sailpoint.reporting.*;
                          return ReportingLibrary.describeCertificationEntitlement(value, scriptArgs.get("bundle"), scriptArgs.get("violationSummary"), null);
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="application" header="rept_cert_col_application" property="exceptionEntitlements.application" sortable="true"/>
                    <ReportColumnConfig field="instance" header="rept_cert_col_instance" property="exceptionEntitlements.instance" sortable="true"/>
                    <ReportColumnConfig field="identity" header="rept_cert_col_name" property="parent.identity" sortable="true"/>
                    <ReportColumnConfig field="status" header="rept_cert_col_status" property="summaryStatus" sortable="true"/>
                    <ReportColumnConfig field="decision" header="rept_cert_col_decision" property="action.status" sortable="true"/>
                    <ReportColumnConfig field="newValue" header="rept_cert_col_newValue" property="action" sortable="false">
                      <RenderScript>
                        <Source>
                          import sailpoint.reporting.datasource.*;
                          return DataSourceUtil.getRemediationModifiableNewValue(value);
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="remediationCompleted" header="rept_cert_col_revoke_completed" property="action" sortable="false">
                      <RenderScript>
                        <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          import sailpoint.tools.Util;
                          import java.lang.String;
                          String status = ReportingLibrary.getRemediationStatus(context, value);
                          return Util.isNullOrEmpty(status) ? "" : status;
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="decisionMaker" header="rept_cert_col_decision_maker" property="action.actorName" sortable="true"/>
                    <ReportColumnConfig field="comments" header="rept_cert_col_decision_maker_comments" property="action" sortable="false">
                      <RenderScript>
                         <Source>
                           return value != null ? value.getComments() : null;
                         </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="exclusionExplanation" header="rept_cert_col_exclusion_explanation" property="parent.certification" sortable="false">
                      <RenderScript>
                        <Source>
                          <![CDATA[
                          if (value != null){
                            List archivedEntities = value.fetchArchivedEntities(context);
                            if (archivedEntities != null
                                && archivedEntities.size() > 0
                                && archivedEntities.get(0) != null) {
                              return archivedEntities.get(0).getExplanation();
                            }
                          }
                          ]]>
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                  </Columns>
              </LiveReport>
            </value>
          </entry>
          </Map>
        </Attributes>
        <Signature>
            <Inputs>
                <Argument name="exclusions" type="boolean"></Argument>
                <Argument multi="true" name="certificationGroups" type="CertificationGroup">
                    <Description></Description>
                </Argument>
                <Argument multi="true" name="applications" type="Application">
                    <Description>rept_input_cert_report_apps_owner</Description>
                </Argument>
                <Argument name="createStartDate" type="date">
                    <Description>rept_input_cert_report_create_dt_start</Description>
                </Argument>
                <Argument name="createEndDate" type="date">
                    <Description>rept_input_cert_report_create_dt_end</Description>
                </Argument>
                <Argument name="signedStartDate" type="date">
                    <Description>rept_input_cert_report_signed_date_start</Description>
                </Argument>
                <Argument name="signedEndDate" type="date">
                    <Description>rept_input_cert_report_signed_date_end</Description>
                </Argument>
                <Argument name="dueStartDate" type="date">
                    <Description>rept_input_cert_report_exp_dt_start</Description>
                </Argument>
                <Argument name="dueEndDate" type="date">
                    <Description>rept_input_cert_report_exp_dt_end</Description>
                </Argument>
                <Argument multi="true" name="tags" type="Tag">
                    <Description>rept_input_cert_report_tags</Description>
                </Argument>
            </Inputs>
        </Signature>
    </TaskDefinition>

    <TaskDefinition name="Manager Access Review Live Report" executor="sailpoint.reporting.LiveReportExecutor"
                    resultAction="Rename" subType="Access Review and Certification Reports"
                    template="true" type="LiveReport" progressMode="Percentage">
        <Description>Displays information about all manager certifications in detailed format.</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessManagerCertificationReport"/>
        </RequiredRights>
        <Attributes>
          <Map>
            <entry key="report">
              <value>
                <LiveReport title="Certification Report">
                  <InitializationRule>
                    <Reference class="sailpoint.object.Rule" name="Certification Report Customizer"/>
                  </InitializationRule>
                  <Chart title="rept_cert_chart_title" type="column" groupBy="action.status,type" value="count(*)" series="action.status" category="type" nullSeries="cert_action_open"/>
                  <ReportSummary title="rept_cert_summary_title">
                    <Values>
                      <LiveReportSummaryValue name="certifications" label="reprt_cert_summary_total_certs"/>
                      <LiveReportSummaryValue name="accessReviews" label="reprt_cert_summary_total_access_reviews"/>
                      <LiveReportSummaryValue name="identities" label="reprt_cert_summary_total_identities"/>
                      <LiveReportSummaryValue name="items" label="reprt_cert_summary_total_items"/>
                    </Values>
                    <DataSourceScript>
                      <Source>
                        <![CDATA[
                        import java.util.*;
                        import sailpoint.object.*;

                        QueryOptions ops = baseQueryOptions;

                        List fields = new ArrayList();
                        fields.add("count(*)");
                        fields.add("count(distinct parent.id)");
                        fields.add("count(distinct parent.certification.id)");
                        fields.add("count(distinct parent.certification.certificationGroups.id)");

                        Iterator iter = context.search(CertificationItem.class, ops, fields);

                        Map map = new HashMap();

                        if (iter.hasNext()){
                          Object[] results = iter.next();
                          map.put("certifications", results[3]);
                          map.put("accessReviews", results[2]);
                          map.put("identities", results[1]);
                          map.put("items", results[0]);
                        }

                        return map;
                        ]]>
                      </Source>
                    </DataSourceScript>
                  </ReportSummary>
                  <ReportForm>
                      <Reference class="sailpoint.object.Form" name="Manager Access Review Report Form"/>
                  </ReportForm>
                  <DataSource dataSourceClass="sailpoint.reporting.datasource.CertificationLiveReportDataSource" objectType="CertificationItem" type="Java">
                     <QueryParameters>
                      <Parameter argument="type" defaultValue="Manager" property="parent.certification.type" valueClass="sailpoint.object.Certification$Type"/>
                      <Parameter argument="tags" property="parent.certification.tags.id"/>
                      <Parameter argument="certificationGroups" property="parent.certification.certificationGroups.id"/>
                      <Parameter argument="managers" property="parent.certification.manager">
                        <ValueScript>
                          <Source>
                            import sailpoint.object.*;
                            import sailpoint.api.ObjectUtil;
                            if (value != null){
                              return ObjectUtil.convertIdsToNames(context, Identity.class, value);
                            }
                            return null;
                          </Source>
                        </ValueScript>
                      </Parameter>
                      <Parameter argument="createStartDate" property="parent.certification.created" operation="GT"/>
                      <Parameter argument="createEndDate" property="parent.certification.created" operation="LT"/>
                      <Parameter argument="signedStartDate" property="parent.certification.signed"  operation="GT"/>
                      <Parameter argument="signedEndDate" property="parent.certification.signed" operation="LT"/>
                      <Parameter argument="dueStartDate" property="parent.certification.expiration"  operation="GT"/>
                      <Parameter argument="dueEndDate" property="parent.certification.expiration" operation="LT"/>
                    </QueryParameters>
                  </DataSource>
                  <Columns>
                    <ReportColumnConfig field="nativeIdentity" header="rept_cert_col_account_id" property="exceptionEntitlements.nativeIdentity" sortable="true"/>
                    <ReportColumnConfig field="firstName" header="rept_cert_col_first_name" property="parent.firstname" sortable="true"/>
                    <ReportColumnConfig field="lastName" header="rept_cert_col_last_name" property="parent.lastname" sortable="true"/>
                    <ReportColumnConfig field="manager" header="rept_cert_col_manager_name" property="parent.certification.manager" sortable="true"/>
                    <ReportColumnConfig field="certName" header="rept_cert_col_cert_access_review" property="parent.certification.name" sortable="true"/>
                    <ReportColumnConfig field="certGroupName" header="rept_cert_col_cert_grp_name" property="parent.certification.certificationGroups.name" sortable="true"/>
                    <ReportColumnConfig field="tags" header="rept_cert_col_tags" property="parent.certification.tags.name" subQueryKey="id"/>
                    <ReportColumnConfig field="entitlementType" header="rept_cert_col_entitlement_type" property="type" sortable="true"/>
                    <ReportColumnConfig field="entitlement" header="rept_cert_col_entitlement_desc" property="exceptionEntitlements" scriptArguments="bundle,violationSummary" sortable="false">
                      <RenderScript>
                        <Source>
                          import sailpoint.reporting.*;
                          return ReportingLibrary.describeCertificationEntitlement(value, scriptArgs.get("bundle"), scriptArgs.get("violationSummary"), null);
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="application" header="rept_cert_col_application" property="exceptionEntitlements.application" sortable="true"/>
                    <ReportColumnConfig field="instance" header="rept_cert_col_instance" property="exceptionEntitlements.instance" sortable="true"/>
                    <ReportColumnConfig field="identity" header="rept_cert_col_name" property="parent.identity" sortable="true"/>
                    <ReportColumnConfig field="status" header="rept_cert_col_status" property="summaryStatus" sortable="true"/>
                    <ReportColumnConfig field="decision" header="rept_cert_col_decision" property="action.status" sortable="true"/>
                    <ReportColumnConfig field="newValue" header="rept_cert_col_newValue" property="action" sortable="false">
                      <RenderScript>
                        <Source>
                          import sailpoint.reporting.datasource.*;
                          return DataSourceUtil.getRemediationModifiableNewValue(value);
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="remediationCompleted" header="rept_cert_col_revoke_completed" property="action" sortable="false">
                      <RenderScript>
                        <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          import sailpoint.tools.Util;
                          import java.lang.String;
                          String status = ReportingLibrary.getRemediationStatus(context, value);
                          return Util.isNullOrEmpty(status) ? "" : status;
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="decisionMaker" header="rept_cert_col_decision_maker" property="action.actorName" sortable="true"/>
                    <ReportColumnConfig field="comments" header="rept_cert_col_decision_maker_comments" property="action" sortable="false">
                      <RenderScript>
                        <Source>
                          return value != null ? value.getComments() : null;
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="exclusionExplanation" header="rept_cert_col_exclusion_explanation" property="parent" sortable="false">
                      <RenderScript>
                        <Source>
                          <![CDATA[
                          if (value != null) {
                            if (value instanceof sailpoint.object.ArchivedCertificationEntity) {
                              return value.getExplanation();
                            }
                          }
                          ]]>
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                  </Columns>
              </LiveReport>
            </value>
          </entry>
          </Map>
        </Attributes>
        <Signature>
            <Inputs>
                <Argument multi="true" name="certificationGroups" type="CertificationGroup"/>
                <Argument name="exclusions" type="boolean"></Argument>
                <Argument multi="true" name="managers" type="Identity">
                    <Description>rept_input_cert_report_mgrs</Description>
                </Argument>
                <Argument name="createStartDate" type="date">
                    <Description>rept_input_cert_report_create_dt_start</Description>
                </Argument>
                <Argument name="createEndDate" type="date">
                    <Description>rept_input_cert_report_create_dt_end</Description>
                </Argument>
                <Argument name="signedStartDate" type="date">
                    <Description>rept_input_cert_report_signed_date_start</Description>
                </Argument>
                <Argument name="signedEndDate" type="date">
                    <Description>rept_input_cert_report_signed_date_end</Description>
                </Argument>
                <Argument name="dueStartDate" type="date">
                    <Description>rept_input_cert_report_exp_dt_start</Description>
                </Argument>
                <Argument name="dueEndDate" type="date">
                    <Description>rept_input_cert_report_exp_dt_end</Description>
                </Argument>
                <Argument name="tags" type="Tag" multi="true">
                    <Description>rept_input_cert_report_tags</Description>
                </Argument>
            </Inputs>
        </Signature>
    </TaskDefinition>

    <TaskDefinition name="Advanced Access Review Live Report" executor="sailpoint.reporting.LiveReportExecutor"
                    resultAction="Rename" subType="Access Review and Certification Reports"
                    template="true" type="LiveReport" progressMode="Percentage">
        <Description>Displays information about all advanced certifications in detailed format.</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessAdvancedCertificationReport"/>
        </RequiredRights>
        <Attributes>
          <Map>
            <entry key="report">
              <value>
                <LiveReport title="Certification Report">
                  <InitializationRule>
                    <Reference class="sailpoint.object.Rule" name="Certification Report Customizer"/>
                  </InitializationRule>
                  <ReportForm>
                      <Reference class="sailpoint.object.Form" name="Advanced Access Review Report Form"/>
                  </ReportForm>
                  <DataSource objectType="CertificationItem"
                              dataSourceClass="sailpoint.reporting.datasource.CertificationLiveReportDataSource"
                              type="Java">
                     <QueryParameters>
                      <Parameter argument="type" defaultValue="Group" property="parent.certification.type"
                                 valueClass="sailpoint.object.Certification$Type"/>
                      <Parameter argument="tags" property="parent.certification.tags.id"/>
                      <Parameter argument="certificationGroups" property="parent.certification.certificationGroups.id"/>
                      <Parameter argument="groups" property="parent.certification.groupDefinitionId"/>
                      <Parameter argument="creationDateStart" property="parent.certification.created" operation="GT"/>
                      <Parameter argument="creationDateEnd" property="parent.certification.created" operation="LT"/>
                      <Parameter argument="signedDateStart" property="parent.certification.signed"  operation="GT"/>
                      <Parameter argument="signedDateEnd" property="parent.certification.signed" operation="LT"/>
                      <Parameter argument="expirationDateStart" property="parent.certification.expiration"
                                 operation="GT"/>
                      <Parameter argument="expirationDateEnd" property="parent.certification.expiration"
                                 operation="LT"/>
                    </QueryParameters>
                  </DataSource>
                  <Columns>
                    <ReportColumnConfig field="nativeIdentity" header="rept_cert_col_account_id" property="exceptionEntitlements.nativeIdentity" sortable="true"/>
                    <ReportColumnConfig field="firstName" header="rept_cert_col_first_name" property="parent.firstname" sortable="true"/>
                    <ReportColumnConfig field="lastName" header="rept_cert_col_last_name" property="parent.lastname" sortable="true"/>
                    <ReportColumnConfig field="manager" header="rept_cert_col_manager_name" property="parent" sortable="false">
                      <RenderScript>
                        <Source>
                          import sailpoint.reporting.*;
                          return value != null ? ReportingLibrary.getCertificationItemManagerName(context, value) : null;
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="certName" header="rept_cert_col_cert_access_review" property="parent.certification.name" sortable="true"/>
                    <ReportColumnConfig field="certGroupName" header="rept_cert_col_cert_grp_name" property="parent.certification.certificationGroups.name" sortable="true"/>
                    <ReportColumnConfig field="tags" header="rept_cert_col_tags" property="parent.certification.tags.name" subQueryKey="id"/>
                    <ReportColumnConfig field="entitlementType" header="rept_cert_col_entitlement_type" property="type" sortable="true"/>
                    <ReportColumnConfig field="entitlements" header="rept_cert_col_entitlement_desc" property="exceptionEntitlements" scriptArguments="bundle,violationSummary" sortable="false">
                      <RenderScript>
                        <Source>
                          import sailpoint.reporting.*;
                          return ReportingLibrary.describeCertificationEntitlement(value, scriptArgs.get("bundle"), scriptArgs.get("violationSummary"), null);
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="application" header="rept_cert_col_application" property="exceptionEntitlements.application" sortable="true"/>
                    <ReportColumnConfig field="instance" header="rept_cert_col_instance" property="exceptionEntitlements.instance" sortable="true"/>
                    <ReportColumnConfig field="identity" header="rept_cert_col_name" property="parent.identity" sortable="true"/>
                    <ReportColumnConfig field="status" header="rept_cert_col_status" property="summaryStatus" sortable="true"/>
                    <ReportColumnConfig field="decision" header="rept_cert_col_decision" property="action.status" sortable="true"/>
                    <ReportColumnConfig field="newValue" header="rept_cert_col_newValue" property="action" sortable="false">
                      <RenderScript>
                        <Source>
                          import sailpoint.reporting.datasource.*;
                          return DataSourceUtil.getRemediationModifiableNewValue(value);
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="remediationCompleted" header="rept_cert_col_revoke_completed" property="action" sortable="false">
                      <RenderScript>
                        <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          import sailpoint.tools.Util;
                          import java.lang.String;
                          String status = ReportingLibrary.getRemediationStatus(context, value);
                          return Util.isNullOrEmpty(status) ? "" : status;
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="decisionMaker" header="rept_cert_col_decision_maker" property="action.actorName" sortable="true"/>
                    <ReportColumnConfig field="comments" header="rept_cert_col_decision_maker_comments" property="action" sortable="false">
                      <RenderScript>
                        <Source>
                          return value != null ? value.getComments() : null;
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="exclusionExplanation" header="rept_cert_col_exclusion_explanation" property="parent.certification" sortable="false">
                      <RenderScript>
                        <Source>
                          <![CDATA[
                          if (value != null){
                            List archivedEntities = value.fetchArchivedEntities(context);
                            if (archivedEntities != null
                                && archivedEntities.size() > 0
                                && archivedEntities.get(0) != null) {
                              return archivedEntities.get(0).getExplanation();
                            }
                          }
                          ]]>
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                  </Columns>
              </LiveReport>
            </value>
          </entry>
          </Map>
        </Attributes>
        <Signature>
            <Inputs>
                <Argument name="exclusions" type="boolean"></Argument>
                <Argument multi="true" name="certificationGroups" type="CertificationGroup"/>
                <Argument multi="true" name="groups" type="GroupDefinition">
                    <Description>rept_input_cert_report_groups</Description>
                </Argument>
                <Argument name="creationDateStart" type="date">
                    <Description>rept_input_cert_report_create_dt_start</Description>
                </Argument>
                <Argument name="creationDateEnd" type="date">
                    <Description>rept_input_cert_report_create_dt_end</Description>
                </Argument>
                <Argument name="signedDateStart" type="date">
                    <Description>rept_input_cert_report_signed_date_start</Description>
                </Argument>
                <Argument name="signedDateEnd" type="date">
                    <Description>rept_input_cert_report_signed_date_end</Description>
                </Argument>
                <Argument name="expirationDateStart" type="date">
                    <Description>rept_input_cert_report_exp_dt_start</Description>
                </Argument>
                <Argument name="expirationDateEnd" type="date">
                    <Description>rept_input_cert_report_exp_dt_end</Description>
                </Argument>
                <Argument multi="true" name="tags" type="Tag">
                    <Description>rept_input_cert_report_tags</Description>
                </Argument>
            </Inputs>
        </Signature>
    </TaskDefinition>

    <TaskDefinition name="Revocation Live Report" executor="sailpoint.reporting.LiveReportExecutor"
                    resultAction="Rename" progressMode="Percentage" subType="Administration Reports"
                    template="true" type="LiveReport">
        <Description>Displays information about all revocations in the system and how they have been handled in detailed format.</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessRemediationProgressReport"/>
        </RequiredRights>
        <Attributes>
          <Map>
            <entry key="report">
              <value>
                <LiveReport title="Revocation Report">
                  <DataSource objectType="CertificationItem" type="Filter">
                     <QueryParameters>
                      <Parameter argument="remediationKickedOff" property="action.remediationKickedOff" defaultValue="true" valueClass="boolean"/>
                      <Parameter argument="type" property="parent.certification.type" valueClass="sailpoint.object.Certification$Type"/>
                      <Parameter argument="tags" property="parent.certification.tags.id"/>
                      <Parameter argument="certificationGroups" property="parent.certification.certificationGroups.id"/>
                      <Parameter argument="applications">
                        <QueryScript>
                          <Source>
                            <![CDATA[
                            import sailpoint.object.*;
                            import sailpoint.api.ObjectUtil;
                            import java.util.*;

                            if (value != null){
                              List appNames = ObjectUtil.convertIdsToNames(context, Application.class, value);
                              if (appNames != null && !appNames.isEmpty()){
                                List filters = new ArrayList();
                                for(String appName : appNames){
                                  List appList = new ArrayList();
                                  appList.add(appName);
                                  filters.add(Filter.containsAll("applicationNames", appList));
                                }
                                queryOptions.addFilter(Filter.or(filters));
                              }
                            }

                            return queryOptions;
                            ]]>
                          </Source>
                        </QueryScript>
                      </Parameter>
                      <Parameter argument="groups">
                        <QueryScript>
                          <Source>
                            import sailpoint.reporting.*;
                            import sailpoint.object.*;

                            Filter f = ReportingLibrary.getGroupDefinitionFilter(context, value, true);
                            if(f!=null) {
                              queryOptions.addFilter(Filter.join("parent.identity", "Identity.name"));
                              queryOptions.addFilter(f);
                            }
                            return queryOptions;
                          </Source>
                        </QueryScript>
                      </Parameter>
                      <Parameter argument="creationStartDate" property="parent.certification.created" operation="GT"/>
                      <Parameter argument="creationEndDate" property="parent.certification.created" operation="LT"/>
                      <Parameter argument="signedStartDate" property="parent.certification.signed"  operation="GT"/>
                      <Parameter argument="signedEndDate" property="parent.certification.signed" operation="LT"/>
                      <Parameter argument="expirationStartDate" property="parent.certification.expiration"  operation="GT"/>
                      <Parameter argument="expirationEndDate" property="parent.certification.expiration" operation="LT"/>
                    </QueryParameters>
                  </DataSource>
                  <ReportForm>
                      <Reference class="sailpoint.object.Form" name="Revocation Report Form"/>
                  </ReportForm>
                  <Columns>
                     <ReportColumnConfig field="status" header="rept_remediation_progress_grid_col_status" property="action.remediationCompleted" sortable="true">
                       <RenderScript>
                        <Source>
                          import sailpoint.tools.Message;
                          import sailpoint.web.messages.MessageKeys;
                          return value == true ? Message.localize(MessageKeys.WORK_ITEM_STATE_FINISHED) : Message.localize(MessageKeys.WORK_ITEM_STATE_OPEN);
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="recipient" header="rept_remediation_progress_grid_col_recipient" property="action.ownerName" sortable="true"/>
                    <ReportColumnConfig field="requestor" header="rept_remediation_progress_grid_col_requester" property="action.actorName" sortable="true"/>
                    <ReportColumnConfig field="type" header="rept_remediation_progress_grid_col_type" property="action" sortable="true">
                      <RenderScript>
                        <Source>
                          <![CDATA[
                          import sailpoint.object.*;
                          Object returnValue = null;
                          if(value != null && value.getRemediationAction() != null) {
                            if (value.getRemediationAction().equals(CertificationAction.RemediationAction.SendProvisionRequest)) {
                              ProvisioningPlan plan = value.getRemediationDetails();
                              if(plan != null && plan.getAccountRequests() !=null) {
                                    if(!plan.getAccountRequests().isEmpty()) {
                                        returnValue = plan.getAccountRequests().get(0).getTargetIntegration();
                                    }
                              }
                              else 
                                 returnValue = null;
                            }

                            if (null == returnValue)
                              returnValue = value.getRemediationAction();

                            return returnValue;
                          }
                          ]]>
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="requestId" header="rept_remediation_progress_grid_col_requestID" property="action" sortable="true">
                      <RenderScript>
                        <Source>
                          <![CDATA[
                            import sailpoint.object.*;
                             if(value!=null) {
                                ProvisioningPlan plan = value.getRemediationDetails();
                                if(plan!=null && plan.getAccountRequests()!=null && !plan.getAccountRequests().isEmpty())
                                  return plan.getAccountRequests().get(0).getRequestID();
                             }

                            return null;
                          ]]>
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="expiration" header="rept_remediation_progress_grid_col_expiration" property="parent.certification.expiration" sortable="true"/>
                    <ReportColumnConfig field="identity" header="rept_remediation_progress_grid_col_identity" property="parent.identity" scriptArguments="type,targetName" sortable="true">
                      <RenderScript>
                        <Source>
                          import sailpoint.object.*;
                          CertificationItem.Type type = scriptArgs.get("type");
                          if(type.equals(CertificationItem.Type.AccountGroupMembership) || type.equals(CertificationItem.Type.DataOwner)) {
                              return scriptArgs.get("targetName");
                          } else {
                              return value;
                          }
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="account" header="rept_remediation_progress_grid_col_account" property="exceptionEntitlements.displayName" scriptArguments="policyViolation" sortable="true">
                      <RenderScript>
                        <Source>
                          <![CDATA[
                            import sailpoint.object.*;
                            import sailpoint.policy.*;
                            import sailpoint.tools.*;
                            if(value!=null)
                                return value;

                            PolicyViolation violation = scriptArgs.get("policyViolation");
                            if(violation != null) {
                                if(violation.getArgument(AccountPolicyExecutor.VIOLATION_ACCOUNTS)!=null) {
                                    return Util.listToCsv((List)violation.getArgument(AccountPolicyExecutor.VIOLATION_ACCOUNTS));
                                }
                            }
                          ]]>
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="application" header="rept_remediation_progress_grid_col_application" property="exceptionEntitlements.application" scriptArguments="policyViolation" sortable="true">
                      <RenderScript>
                        <Source>
                          <![CDATA[
                            import sailpoint.object.*;
                            import sailpoint.tools.Util;
                            if(value!=null)
                                return value;

                            PolicyViolation violation = scriptArgs.get("policyViolation");
                            if(violation != null && violation.getRelevantApps() != null) {
                                return Util.listToCsv(violation.getRelevantApps());
                            }
                          ]]>
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="instance" header="rept_certification_col_instance" property="exceptionEntitlements.instance" sortable="true"/>
                    <ReportColumnConfig field="entitlement" header="rept_remediation_progress_grid_col_entitlement"
                                        property="exceptionEntitlements"
                                        scriptArguments="bundle,violationSummary,targetName" sortable="false">
                      <RenderScript>
                        <Source>
                          import sailpoint.reporting.*;
                          return ReportingLibrary.describeCertificationEntitlement(value, null, scriptArgs.get("violationSummary"), scriptArgs.get("targetName"));
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="newValue" header="rept_remediation_progress_grid_col_newValue" property="action" sortable="false">
                      <RenderScript>
                        <Source>
                          import sailpoint.reporting.datasource.*;
                          return DataSourceUtil.getRemediationModifiableNewValue(value);
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="requestComments" header="rept_remediation_progress_detail_requester_comments" property="action.comments" sortable="false"/>
                    <ReportColumnConfig field="completionComments" header="rept_remediation_progress_detail_completion_comments" property="action.completionComments" sortable="false"/>
                  </Columns>
              </LiveReport>
            </value>
          </entry>
          </Map>
        </Attributes>
        <Signature>
            <Inputs>
                <Argument multi="true" name="tags" type="Tag"/>
                <Argument multi="true" name="groups" type="GroupDefinition">
                    <Description>rept_input_cert_report_groups</Description>
                </Argument>
                <Argument multi="true" name="certificationGroups" type="CertificationGroup">
                    <Description></Description>
                </Argument>
                <Argument multi="true" name="applications" type="Application">
                    <Description>rept_input_remed_progr_report_apps</Description>
                </Argument>
                <Argument name="creationStartDate" type="date">
                    <Description>rept_input_remed_progr_report_create_dt_start</Description>
                </Argument>
                <Argument name="creationEndDate" type="date">
                    <Description>rept_input_remed_progr_report_create_dt_end</Description>
                </Argument>
                <Argument name="signedStartDate" type="date">
                    <Description>rept_input_remed_progr_report_signed_date_start</Description>
                </Argument>
                <Argument name="signedEndDate" type="date">
                    <Description>rept_input_remed_progr_report_signed_date_end</Description>
                </Argument>
                <Argument name="expirationStartDate" type="date">
                    <Description>rept_input_remed_progr_report_exp_dt_start</Description>
                </Argument>
                <Argument name="expirationEndDate" type="date">
                    <Description>rept_input_remed_progr_report_exp_dt_end</Description>
                </Argument>
            </Inputs>
        </Signature>
    </TaskDefinition>

    <TaskDefinition name="Certification Activity by Application Live Report" executor="sailpoint.reporting.LiveReportExecutor"
                    resultAction="Rename" subType="Access Review and Certification Reports"
                    template="true" type="LiveReport"  progressMode="Percentage">
         <Description>Displays information about the activity on the certifications in the system in detailed format.</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessApplicationCentricCertificationReport"/>
        </RequiredRights>
        <Attributes>
          <Map>
            <entry key="report">
              <value>
                <LiveReport title="Certification Report">
                   <InitializationRule>
                    <Reference class="sailpoint.object.Rule" name="Certification Report Customizer"/>
                  </InitializationRule>
                  <ReportForm>
                      <Reference class="sailpoint.object.Form" name="Certification Activity by Application Form"/>
                  </ReportForm>
                  <Chart title="rept_cert_chart_title" type="column" groupBy="action.status,type" value="count(*)" series="action.status" category="type" nullSeries="cert_action_open"/>
                  <ReportSummary title="rept_cert_summary_title">
                    <Values>
                      <LiveReportSummaryValue name="certifications" label="reprt_cert_summary_total_certs"/>
                      <LiveReportSummaryValue name="accessReviews" label="reprt_cert_summary_total_access_reviews"/>
                      <LiveReportSummaryValue name="identities" label="reprt_cert_summary_total_identities"/>
                      <LiveReportSummaryValue name="items" label="reprt_cert_summary_total_items"/>
                    </Values>
                    <DataSourceScript>
                      <Source>
                        <![CDATA[
                        import java.util.*;
                        import sailpoint.object.*;

                        QueryOptions ops = baseQueryOptions;

                        List fields = new ArrayList();
                        fields.add("count(*)");
                        fields.add("count(distinct parent.id)");
                        fields.add("count(distinct parent.certification.id)");
                        fields.add("count(distinct parent.certification.certificationGroups.id)");

                        Iterator iter = context.search(CertificationItem.class, ops, fields);

                        Map map = new HashMap();

                        if (iter.hasNext()){
                          Object[] results = iter.next();
                          map.put("certifications", results[3]);
                          map.put("accessReviews", results[2]);
                          map.put("identities", results[1]);
                          map.put("items", results[0]);
                        }

                        return map;
                        ]]>
                      </Source>
                    </DataSourceScript>
                  </ReportSummary>
                  <DataSource objectType="CertificationItem" dataSourceClass="sailpoint.reporting.datasource.CertificationLiveReportDataSource" type="Java">
                    <QueryParameters>
                      <Parameter argument="phase" property="parent.certification.phase" defaultValue="Staged" operation="NE" valueClass="sailpoint.object.Certification$Phase"/>
                      <Parameter argument="type">
                        <QueryScript>
                          <Source>
                            import sailpoint.object.*;
                            queryOptions.addFilter(Filter.ne("parent.certification.type", Certification.Type.BusinessRoleComposition));
                            queryOptions.addFilter(Filter.ne("parent.certification.type", Certification.Type.AccountGroupPermissions));
                            return queryOptions;
                          </Source>
                        </QueryScript>
                      </Parameter>
                      <Parameter argument="tags" property="parent.certification.tags.id"/>
                      <Parameter argument="certificationGroups" property="parent.certification.certificationGroups.id"/>
                      <Parameter argument="applicationNames" property="applicationNames">
                        <QueryScript>
                          <Source>
                            import sailpoint.object.*;
                            import sailpoint.api.ObjectUtil;
                            List appNames = new ArrayList();
                            if (value != null){
                              appNames = ObjectUtil.convertIdsToNames(context, Application.class, value);
                            }

                            if (appNames.size() != 0){
                              queryOptions.addFilter(Filter.containsAll("applicationNames", appNames));
                            }
                            return queryOptions;
                          </Source>
                        </QueryScript>
                      </Parameter>
                      <Parameter argument="createStartDate" property="parent.certification.created" operation="GT"/>
                      <Parameter argument="createEndDate" property="parent.certification.created" operation="LT"/>
                      <Parameter argument="signedStartDate" property="parent.certification.signed"  operation="GT"/>
                      <Parameter argument="signedEndDate" property="parent.certification.signed" operation="LT"/>
                      <Parameter argument="dueStartDate" property="parent.certification.expiration"  operation="GT"/>
                      <Parameter argument="dueEndDate" property="parent.certification.expiration" operation="LT"/>
                    </QueryParameters>
                  </DataSource>
                  <Columns>
                    <ReportColumnConfig field="nativeIdentity" header="rept_cert_col_account_id" property="exceptionEntitlements.nativeIdentity" sortable="true"/>
                    <ReportColumnConfig field="identity" header="rept_cert_col_identity" property="parent.identity" scriptArguments="parent.certification.type,targetName" sortable="false">
                      <RenderScript>
                        <Source>
                            <![CDATA[
                                import sailpoint.object.*;
                                if (value == null || Certification.Type.DataOwner.equals(scriptArgs.get("parent.certification.type"))){
                                  return scriptArgs.get("targetName");
                                }

                                return value;
                            ]]>
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="manager" header="rept_cert_col_manager_name" property="parent" sortable="false">
                      <RenderScript>
                        <Source>
                          import sailpoint.reporting.*;
                          return value != null ? ReportingLibrary.getCertificationItemManagerName(context, value) : null;
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="certName" header="rept_cert_col_cert_access_review" property="parent.certification.name" sortable="true"/>
                    <ReportColumnConfig field="certGroupName" header="rept_cert_col_cert_grp_name" property="parent.certification.certificationGroups.name" sortable="true"/>
                    <ReportColumnConfig field="tags" header="rept_cert_col_tags" property="parent.certification.tags.name" subQueryKey="id"/>
                    <ReportColumnConfig field="entitlementType" header="rept_cert_col_entitlement_type" property="type" sortable="true"/>
                    <ReportColumnConfig field="entitlement" header="rept_cert_col_entitlement_desc" property="exceptionEntitlements" scriptArguments="bundle,violationSummary,targetName" sortable="false">
                      <RenderScript>
                        <Source>
                          import sailpoint.reporting.*;
                          return ReportingLibrary.describeCertificationEntitlement(value, scriptArgs.get("bundle"), scriptArgs.get("violationSummary"), scriptArgs.get("targetName"));
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="status" header="rept_cert_col_status" property="summaryStatus" sortable="true"/>
                    <ReportColumnConfig field="decision" header="rept_cert_col_decision" property="action.status" sortable="true"/>
                    <ReportColumnConfig field="newValue" header="rept_cert_col_newValue" property="action" sortable="false">
                      <RenderScript>
                        <Source>
                          import sailpoint.reporting.datasource.*;
                          return DataSourceUtil.getRemediationModifiableNewValue(value);
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="remediationCompleted" header="rept_cert_col_revoke_completed" property="action" sortable="false">
                      <RenderScript>
                        <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          import sailpoint.tools.Util;
                          import java.lang.String;
                          String status = ReportingLibrary.getRemediationStatus(context, value);
                          return Util.isNullOrEmpty(status) ? "" : status;
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="decisionMaker" header="rept_cert_col_decision_maker" property="action.actorName" sortable="true"/>
                    <ReportColumnConfig field="comments" header="rept_cert_col_decision_maker_comments" property="action" sortable="false">
                      <RenderScript>
                        <Source>
                          return value != null ? value.getComments() : null;
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="application" header="rept_certification_form_application" property="exceptionEntitlements.application" sortable="true"/>
                    <ReportColumnConfig field="exclusionExplanation" header="rept_cert_col_exclusion_explanation" property="parent.certification" sortable="false">
                      <RenderScript>
                        <Source>
                          <![CDATA[
                          if (value != null){
                            List archivedEntities = value.fetchArchivedEntities(context);
                            if (archivedEntities != null
                                && archivedEntities.size() > 0
                                && archivedEntities.get(0) != null) {
                              return archivedEntities.get(0).getExplanation();
                            }
                          }
                          ]]>
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                  </Columns>
              </LiveReport>
            </value>
          </entry>
          </Map>
        </Attributes>
        <Signature>
            <Inputs>
                <Argument name="exclusions" type="boolean"></Argument>
                <Argument multi="true" name="certificationGroups" type="CertificationGroup">
                    <Description></Description>
                </Argument>
                <Argument multi="true" name="applicationNames" type="Application">
                    <Description>rept_input_app_centric_cert_report_app</Description>
                </Argument>
                <Argument name="createStartDate" type="date">
                    <Description>rept_input_cert_report_create_dt_start</Description>
                </Argument>
                <Argument name="createEndDate" type="date">
                    <Description>rept_input_cert_report_create_dt_end</Description>
                </Argument>
                <Argument name="signedStartDate" type="date">
                    <Description>rept_input_cert_report_signed_date_start</Description>
                </Argument>
                <Argument name="signedEndDate" type="date">
                    <Description>rept_input_cert_report_signed_date_end</Description>
                </Argument>
                <Argument name="dueStartDate" type="date">
                    <Description>rept_input_cert_report_exp_dt_start</Description>
                </Argument>
                <Argument name="dueEndDate" type="date">
                    <Description>rept_input_cert_report_exp_dt_end</Description>
                </Argument>
                <Argument multi="true" name="tags" type="Tag">
                    <Description>rept_input_cert_report_tags</Description>
                </Argument>
            </Inputs>
        </Signature>
    </TaskDefinition>

    <TaskDefinition name="Role Membership Access Review Live Report" executor="sailpoint.reporting.LiveReportExecutor"
                    resultAction="Rename" subType="Access Review and Certification Reports"
                    template="true" type="LiveReport" progressMode="Percentage">
        <Description>Displays information about all role membership certifications in detailed format.</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessManagerCertificationReport"/>
        </RequiredRights>
        <Attributes>
          <Map>
            <entry key="report">
              <value>
                <LiveReport title="Certification Report">
                  <InitializationRule>
                    <Reference class="sailpoint.object.Rule" name="Certification Report Customizer"/>
                  </InitializationRule>
                  <ReportForm>
                      <Reference class="sailpoint.object.Form" name="Role Membership Access Review Report Form"/>
                  </ReportForm>
                  <DataSource objectType="CertificationItem" dataSourceClass="sailpoint.reporting.datasource.CertificationLiveReportDataSource" type="Java">
                     <QueryParameters>
                      <Parameter argument="type" defaultValue="BusinessRoleMembership" property="parent.certification.type" valueClass="sailpoint.object.Certification$Type"/>
                      <Parameter argument="tags" property="parent.certification.tags.id"/>
                      <Parameter argument="certificationGroups" property="parent.certification.certificationGroups.id"/>
                      <Parameter argument="identities" property="parent.identity">
                         <ValueScript>
                          <Source>
                            import sailpoint.object.*;
                            import sailpoint.api.ObjectUtil;
                            if (value != null){
                              return ObjectUtil.convertIdsToNames(context, Identity.class, value);
                            }
                            return null;
                          </Source>
                        </ValueScript>
                      </Parameter>
                      <Parameter argument="roles" property="bundle">
                        <ValueScript>
                          <Source>
                            import sailpoint.object.*;
                            import sailpoint.api.ObjectUtil;
                            if (value != null){
                              return ObjectUtil.convertIdsToNames(context, Bundle.class, value);
                            }
                            return null;
                          </Source>
                        </ValueScript>
                      </Parameter>
                      <Parameter argument="createStartDate" property="parent.certification.created" operation="GT"/>
                      <Parameter argument="createEndDate" property="parent.certification.created" operation="LT"/>
                      <Parameter argument="signedStartDate" property="parent.certification.signed"  operation="GT"/>
                      <Parameter argument="signedEndDate" property="parent.certification.signed" operation="LT"/>
                      <Parameter argument="dueStartDate" property="parent.certification.expiration"  operation="GT"/>
                      <Parameter argument="dueEndDate" property="parent.certification.expiration" operation="LT"/>
                    </QueryParameters>
                  </DataSource>
                  <Columns>
                    <ReportColumnConfig field="identity" header="rept_cert_col_name" property="parent.identity" sortable="true"/>
                    <ReportColumnConfig field="firstName" header="rept_cert_col_first_name" property="parent.firstname" sortable="true"/>
                    <ReportColumnConfig field="lastName" header="rept_cert_col_last_name" property="parent.lastname" sortable="true"/>
                    <ReportColumnConfig field="manager" header="rept_cert_col_manager_name" property="parent">
                      <RenderScript>
                        <Source>
                          import sailpoint.reporting.*;
                          return value != null ? ReportingLibrary.getCertificationItemManagerName(context, value) : null;
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="certName" header="rept_cert_col_cert_access_review" property="parent.certification.name" sortable="true"/>
                    <ReportColumnConfig field="certGroupName" header="rept_cert_col_cert_grp_name" property="parent.certification.certificationGroups.name" sortable="true"/>
                    <ReportColumnConfig field="tags" header="rept_cert_col_tags" property="parent.certification.tags.name" subQueryKey="id"/>
                    <ReportColumnConfig field="role" header="rept_cert_col_role_name" property="bundle" sortable="true"/>
                    <ReportColumnConfig field="status" header="rept_cert_col_status" property="summaryStatus" sortable="true"/>
                    <ReportColumnConfig field="decision" header="rept_cert_col_decision" property="action.status" sortable="true"/>
                    <ReportColumnConfig field="decisionMaker" header="rept_cert_col_decision_maker" property="action.actorName" sortable="true"/>
                    <ReportColumnConfig field="comments" header="rept_cert_col_decision_maker_comments" property="action" sortable="false">
                      <RenderScript>
                        <Source>
                          return value != null ? value.getComments() : null;
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="exclusionExplanation" header="rept_cert_col_exclusion_explanation" property="parent.certification" sortable="false">
                      <RenderScript>
                        <Source>
                          <![CDATA[
                          if (value != null){
                            List archivedEntities = value.fetchArchivedEntities(context);
                            if (archivedEntities != null
                                && archivedEntities.size() > 0
                                && archivedEntities.get(0) != null) {
                              return archivedEntities.get(0).getExplanation();
                            }
                          }
                          ]]>
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                  </Columns>
              </LiveReport>
            </value>
          </entry>
          </Map>
        </Attributes>
        <Signature>
            <Inputs>
                <Argument name="exclusions" type="boolean"></Argument>
                <Argument multi="true" name="certificationGroups" type="CertificationGroup"/>
                <Argument multi="true" name="roles" type="Bundle">
                    <Description>rept_input_biz_role_cert_report_biz_roles</Description>
                </Argument>
                <Argument multi="true" name="identities" type="Identity">
                    <Description></Description>
                </Argument>
                <Argument name="createStartDate" type="date">
                    <Description>rept_input_cert_report_create_dt_start</Description>
                </Argument>
                <Argument name="createEndDate" type="date">
                    <Description>rept_input_cert_report_create_dt_end</Description>
                </Argument>
                <Argument name="signedStartDate" type="date">
                    <Description>rept_input_cert_report_signed_date_start</Description>
                </Argument>
                <Argument name="signedEndDate" type="date">
                    <Description>rept_input_cert_report_signed_date_end</Description>
                </Argument>
                <Argument name="dueStartDate" type="date">
                    <Description>rept_input_cert_report_exp_dt_start</Description>
                </Argument>
                <Argument name="dueEndDate" type="date">
                    <Description>rept_input_cert_report_exp_dt_end</Description>
                </Argument>
                <Argument multi="true" name="tags" type="Tag">
                    <Description>rept_input_cert_report_tags</Description>
                </Argument>
            </Inputs>
        </Signature>
    </TaskDefinition>

    <TaskDefinition name="Role Composition Access Review Live Report" executor="sailpoint.reporting.LiveReportExecutor"
                    resultAction="Rename" subType="Access Review and Certification Reports"
                    template="true" type="LiveReport" progressMode="Percentage">
        <Description>Displays information about all role composition certifications in detailed format.</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessManagerCertificationReport"/>
        </RequiredRights>
        <Attributes>
          <Map>
            <entry key="report">
              <value>
                <LiveReport title="Certification Report">
                  <InitializationRule>
                    <Reference class="sailpoint.object.Rule" name="Certification Report Customizer"/>
                  </InitializationRule>
                  <ReportForm>
                      <Reference class="sailpoint.object.Form" name="Role Composition Access Review Report Form"/>
                  </ReportForm>
                  <DataSource objectType="CertificationItem" dataSourceClass="sailpoint.reporting.datasource.CertificationLiveReportDataSource" type="Java">
                     <QueryParameters>
                      <Parameter argument="type" defaultValue="BusinessRoleComposition" property="parent.certification.type" valueClass="sailpoint.object.Certification$Type"/>
                      <Parameter argument="tags" property="parent.certification.tags.id"/>
                      <Parameter argument="certificationGroups" property="parent.certification.certificationGroups.id"/>
                      <Parameter argument="roles" property="parent.targetId"/>
                      <Parameter argument="createStartDate" property="parent.certification.created" operation="GT"/>
                      <Parameter argument="createEndDate" property="parent.certification.created" operation="LT"/>
                      <Parameter argument="signedStartDate" property="parent.certification.signed"  operation="GT"/>
                      <Parameter argument="signedEndDate" property="parent.certification.signed" operation="LT"/>
                      <Parameter argument="dueStartDate" property="parent.certification.expiration"  operation="GT"/>
                      <Parameter argument="dueEndDate" property="parent.certification.expiration" operation="LT"/>
                    </QueryParameters>
                  </DataSource>
                  <Columns>
                    <ReportColumnConfig field="role" header="rept_comp_cert_col_role" property="parent.targetName" sortable="true"/>
                    <ReportColumnConfig field="objectType" header="rept_comp_cert_col_obj_type" property="type" sortable="true"/>
                    <ReportColumnConfig field="objectName" header="rept_comp_cert_col_obj_name" property="targetName" sortable="true"/>
                    <ReportColumnConfig field="description" header="rept_comp_cert_col_revoke_desc" scriptArguments="type,targetName" property="targetId" sortable="true">
                      <RenderScript>
                        <Source>
                        <![CDATA[
                          return sailpoint.reporting.ReportingLibrary.describeCompositionItem(context, locale, scriptArgs.get("type"), value, scriptArgs.get("targetName"));
                        ]]>
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="certName" header="rept_cert_col_cert_access_review" property="parent.certification.name" sortable="true"/>
                    <ReportColumnConfig field="certGroupName" header="rept_cert_col_cert_grp_name" property="parent.certification.certificationGroups.name" sortable="true"/>
                    <ReportColumnConfig field="tags" header="rept_cert_col_tags" property="parent.certification.tags.name" subQueryKey="id"/>
                    <ReportColumnConfig field="status" header="rept_comp_cert_col_status" property="summaryStatus" sortable="true"/>
                    <ReportColumnConfig field="decision" header="rept_comp_cert_col_decision" property="action.status" sortable="true"/>
                    <ReportColumnConfig field="remediationCompleted" header="rept_cert_col_revoke_completed" property="action" sortable="false">
                      <RenderScript>
                        <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          import sailpoint.tools.Util;
                          import java.lang.String;
                          String status = ReportingLibrary.getRemediationStatus(context, value);
                          return Util.isNullOrEmpty(status) ? "" : status;
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="decisionMaker" header="rept_comp_cert_col_decider" property="action.actorName" sortable="true"/>
                    <ReportColumnConfig field="comments" header="rept_comp_cert_col_decider_comments" property="action" sortable="false">
                      <RenderScript>
                        <Source>
                          return value != null ? value.getComments() : null;
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="exclusionExplanation" header="rept_cert_col_exclusion_explanation" property="parent.certification" sortable="false">
                      <RenderScript>
                        <Source>
                          <![CDATA[
                          if (value != null){
                            List archivedEntities = value.fetchArchivedEntities(context);
                            if (archivedEntities != null
                                && archivedEntities.size() > 0
                                && archivedEntities.get(0) != null) {
                              return archivedEntities.get(0).getExplanation();
                            }
                          }
                          ]]>
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                  </Columns>
              </LiveReport>
            </value>
          </entry>
          </Map>
        </Attributes>
        <Signature>
            <Inputs>
                <Argument name="exclusions" type="boolean"></Argument>
                <Argument multi="true" name="certificationGroups" type="CertificationGroup">
                    <Description></Description>
                </Argument>
                <Argument multi="true" name="roles" type="Bundle">
                    <Description>rept_input_biz_role_cert_report_biz_roles</Description>
                </Argument>
                <Argument name="createStartDate" type="date">
                    <Description>rept_input_cert_report_create_dt_start</Description>
                </Argument>
                <Argument name="createEndDate" type="date">
                    <Description>rept_input_cert_report_create_dt_end</Description>
                </Argument>
                <Argument name="signedStartDate" type="date">
                    <Description>rept_input_cert_report_signed_date_start</Description>
                </Argument>
                <Argument name="signedEndDate" type="date">
                    <Description>rept_input_cert_report_signed_date_end</Description>
                </Argument>
                <Argument name="dueStartDate" type="date">
                    <Description>rept_input_cert_report_exp_dt_start</Description>
                </Argument>
                <Argument name="dueEndDate" type="date">
                    <Description>rept_input_cert_report_exp_dt_end</Description>
                </Argument>
                <Argument multi="true" name="tags" type="Tag">
                    <Description>rept_input_cert_report_tags</Description>
                </Argument>
            </Inputs>
        </Signature>
    </TaskDefinition>

    <TaskDefinition name="Account Group Membership Access Review Live Report"
                  executor="sailpoint.reporting.LiveReportExecutor" resultAction="Rename"
                  subType="Access Review and Certification Reports"
                  template="true" type="LiveReport" progressMode="Percentage">
      <Description>Displays information about the account group membership certifications in detailed format.</Description>
      <RequiredRights>
          <Reference class="sailpoint.object.SPRight" name="FullAccessEntitlementOwnerAccessReviewReport"/>
      </RequiredRights>
      <Attributes>
        <Map>
          <entry key="report">
            <value>
              <LiveReport title="Certification Report">
                <InitializationRule>
                  <Reference class="sailpoint.object.Rule" name="Certification Report Customizer"/>
                </InitializationRule>
                <ReportForm>
                    <Reference class="sailpoint.object.Form"
                               name="Account Group Membership Access Review Report Form"/>
                </ReportForm>
                <DataSource objectType="CertificationItem" dataSourceClass="sailpoint.reporting.datasource.CertificationLiveReportDataSource" type="Java">
                  <QueryParameters>
                    <Parameter argument="type" defaultValue="AccountGroupMembership"
                               property="parent.certification.type" valueClass="sailpoint.object.Certification$Type"/>
                    <Parameter argument="tags" property="parent.certification.tags.id"/>
                    <Parameter argument="certificationGroups" property="parent.certification.certificationGroups.id"/>
                    <Parameter argument="applications" property="parent.certification.applicationId"/>
                    <Parameter argument="creationDateStart" property="parent.certification.created" operation="GT"/>
                    <Parameter argument="creationDateEnd" property="parent.certification.created" operation="LT"/>
                    <Parameter argument="signedDateStart" property="parent.certification.signed"  operation="GT"/>
                    <Parameter argument="signedDateEnd" property="parent.certification.signed" operation="LT"/>
                    <Parameter argument="expirationDateStart" property="parent.certification.expiration"
                               operation="GT"/>
                    <Parameter argument="expirationDateEnd" property="parent.certification.expiration"
                               operation="LT"/>
                  </QueryParameters>
                </DataSource>
                <Columns>
                  <ReportColumnConfig field="nativeIdentity" header="rept_cert_col_account_id"
                                      property="exceptionEntitlements.nativeIdentity" sortable="true"/>
                  <ReportColumnConfig field="identity" header="rept_cert_col_identity" property="targetName"
                                      sortable="true"/>
                  <ReportColumnConfig field="application" header="rept_cert_col_application" property="parent.application"
                                      sortable="true"/>
                  <ReportColumnConfig field="accountGroup" header="rept_cert_col_account_group"
                                      property="parent.accountGroup" sortable="true"/>
                  <ReportColumnConfig field="accountGroupType" header="rept_cert_col_type"
                                      property="parent.schemaObjectType" sortable="true"/>
                  <ReportColumnConfig field="certName" header="rept_cert_col_cert_access_review"
                                      property="parent.certification.name" sortable="true"/>
                  <ReportColumnConfig field="certGroupName" header="rept_cert_col_cert_grp_name"
                                      property="parent.certification.certificationGroups.name" sortable="true"/>
                  <ReportColumnConfig field="tags" header="rept_cert_col_tags"
                                      property="parent.certification.tags.name" subQueryKey="id"/>
                  <ReportColumnConfig field="status" header="rept_cert_col_status" property="summaryStatus"
                                      sortable="true"/>
                  <ReportColumnConfig field="decision" header="rept_cert_col_decision" property="action.status"
                                      sortable="true"/>
                  <ReportColumnConfig field="newValue" header="rept_cert_col_newValue" property="action"
                                      sortable="false">
                    <RenderScript>
                      <Source>
                        import sailpoint.reporting.datasource.*;
                        return DataSourceUtil.getRemediationModifiableNewValue(value);
                      </Source>
                    </RenderScript>
                  </ReportColumnConfig>
                  <ReportColumnConfig field="remediationCompleted" header="rept_cert_col_revoke_completed" property="action" 
                                      sortable="false">
                    <RenderScript>
                      <Source>
                        import sailpoint.reporting.ReportingLibrary;
                        import sailpoint.tools.Util;
                        import java.lang.String;
                        String status = ReportingLibrary.getRemediationStatus(context, value);
                        return Util.isNullOrEmpty(status) ? "" : status;
                      </Source>
                    </RenderScript>
                  </ReportColumnConfig>
                  <ReportColumnConfig field="decisionMaker" header="rept_cert_col_decision_maker"
                                      property="action.actorName" sortable="true"/>
                  <ReportColumnConfig field="comments" header="rept_cert_col_decision_maker_comments"
                                      property="action" sortable="false">
                      <RenderScript>
                          <Source>
                              return value != null ? value.getComments() : null;
                          </Source>
                      </RenderScript>
                  </ReportColumnConfig>
                  <ReportColumnConfig field="exclusionExplanation" header="rept_cert_col_exclusion_explanation" property="parent.certification" sortable="false">
                    <RenderScript>
                      <Source>
                        <![CDATA[
                        if (value != null){
                          List archivedEntities = value.fetchArchivedEntities(context);
                          if (archivedEntities != null
                              && archivedEntities.size() > 0
                              && archivedEntities.get(0) != null) {
                            return archivedEntities.get(0).getExplanation();
                          }
                        }
                        ]]>
                      </Source>
                    </RenderScript>
                  </ReportColumnConfig>
                </Columns>
              </LiveReport>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Signature>
        <Inputs>
          <Argument name="exclusions" type="boolean"></Argument>
          <Argument multi="true" name="certificationGroups" type="CertificationGroup"/>
          <Argument multi="true" name="applications" type="Application">
              <Description>rept_input_account_grp_cert_report_apps</Description>
          </Argument>
          <Argument name="creationDateStart" type="date">
              <Description>rept_input_account_grp_cert_report_create_dt_start</Description>
          </Argument>
          <Argument name="creationDateEnd" type="date">
              <Description>rept_input_account_grp_cert_report_create_dt_end</Description>
          </Argument>
          <Argument name="signedDateStart" type="date">
              <Description>rept_input_account_grp_cert_report_signed_date_start</Description>
          </Argument>
          <Argument name="signedDateEnd" type="date">
              <Description>rept_input_account_grp_cert_report_signed_date_end</Description>
          </Argument>
          <Argument name="expirationDateStart" type="date">
              <Description>rept_input_account_grp_cert_report_exp_dt_start</Description>
          </Argument>
          <Argument name="expirationDateEnd" type="date">
              <Description>rept_input_account_grp_cert_report_exp_dt_end</Description>
          </Argument>
          <Argument multi="true" name="tags" type="Tag">
              <Description>rept_input_cert_report_tags</Description>
          </Argument>
        </Inputs>
      </Signature>
    </TaskDefinition>

    <TaskDefinition name="Account Group Permissions Access Review Live Report"
                    executor="sailpoint.reporting.LiveReportExecutor" resultAction="Rename"
                    subType="Access Review and Certification Reports"
                    template="true" type="LiveReport" progressMode="Percentage">
        <Description>Displays information about the account group permission certifications in detailed format.</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessEntitlementOwnerAccessReviewReport"/>
        </RequiredRights>
        <Attributes>
          <Map>
            <entry key="report">
              <value>
                <LiveReport title="Certification Report">
                  <InitializationRule>
                    <Reference class="sailpoint.object.Rule" name="Certification Report Customizer"/>
                  </InitializationRule>
                  <ReportForm>
                      <Reference class="sailpoint.object.Form"
                                 name="Account Group Permissions Access Review Report Form"/>
                  </ReportForm>
                  <DataSource objectType="CertificationItem" dataSourceClass="sailpoint.reporting.datasource.CertificationLiveReportDataSource" type="Java">
                     <QueryParameters>
                      <Parameter argument="type" defaultValue="AccountGroupPermissions"
                                 property="parent.certification.type" valueClass="sailpoint.object.Certification$Type"/>
                      <Parameter argument="tags" property="parent.certification.tags.id"/>
                      <Parameter argument="certificationGroups" property="parent.certification.certificationGroups.id"/>
                      <Parameter argument="applications" property="parent.certification.applicationId"/>
                      <Parameter argument="creationDateStart" property="parent.certification.created" operation="GT"/>
                      <Parameter argument="creationDateEnd" property="parent.certification.created" operation="LT"/>
                      <Parameter argument="signedDateStart" property="parent.certification.signed"  operation="GT"/>
                      <Parameter argument="signedDateEnd" property="parent.certification.signed" operation="LT"/>
                      <Parameter argument="expirationDateStart" property="parent.certification.expiration"
                                 operation="GT"/>
                      <Parameter argument="expirationDateEnd" property="parent.certification.expiration"
                                 operation="LT"/>
                    </QueryParameters>
                  </DataSource>
                  <Columns>
                    <ReportColumnConfig field="accountGroup" header="rept_cert_col_account_group"
                                        property="parent.accountGroup" sortable="true"/>
                    <ReportColumnConfig field="schemaObjectType" header="rept_cert_col_type"
                                        property="parent.schemaObjectType" sortable="true"/>
                    <ReportColumnConfig field="application" header="rept_cert_col_application"
                                        property="parent.application" sortable="true"/>
                     <ReportColumnConfig field="permission" header="rept_cert_col_account_group_permission"
                                         property="exceptionEntitlements" sortable="true"
                                         sortExpression="exceptionApplication,exceptionPermissionTarget,exceptionPermissionRight" >
                      <RenderScript>
                        <Source>
                            if(value instanceof sailpoint.object.EntitlementSnapshot){
                                return sailpoint.api.EntitlementDescriber.summarize(value);
                            }
                            return "";
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="certName" header="rept_cert_col_cert_access_review"
                                        property="parent.certification.name" sortable="true"/>
                    <ReportColumnConfig field="certGroupName" header="rept_cert_col_cert_grp_name"
                                        property="parent.certification.certificationGroups.name" sortable="true"/>
                    <ReportColumnConfig field="tags" header="rept_cert_col_tags"
                                        property="parent.certification.tags.name" subQueryKey="id"/>
                    <ReportColumnConfig field="status" header="rept_cert_col_status"
                                        property="summaryStatus" sortable="true"/>
                    <ReportColumnConfig field="decision" header="rept_cert_col_decision"
                                        property="action.status" sortable="true"/>
                    <ReportColumnConfig field="newValue" header="rept_cert_col_newValue"
                                        property="action" sortable="false">
                       <RenderScript>
                        <Source>
                          import sailpoint.reporting.datasource.*;
                          return DataSourceUtil.getRemediationModifiableNewValue(value);
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="remediationCompleted" header="rept_cert_col_revoke_completed" 
                                        property="action" sortable="false">
                      <RenderScript>
                        <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          import sailpoint.tools.Util;
                          import java.lang.String;
                          String status = ReportingLibrary.getRemediationStatus(context, value);
                          return Util.isNullOrEmpty(status) ? "" : status;
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="decisionMaker" header="rept_cert_col_decision_maker"
                                        property="action.actorName" sortable="true"/>
                    <ReportColumnConfig field="comments" header="rept_cert_col_decision_maker_comments"
                                        property="action" sortable="false">
                        <RenderScript>
                            <Source>
                               return value != null ? value.getComments() : null;
                            </Source>
                        </RenderScript>
                    </ReportColumnConfig>
                      <ReportColumnConfig field="exclusionExplanation" header="rept_cert_col_exclusion_explanation" property="parent.certification" sortable="false">
                      <RenderScript>
                        <Source>
                          <![CDATA[
                          if (value != null){
                            List archivedEntities = value.fetchArchivedEntities(context);
                            if (archivedEntities != null
                                && archivedEntities.size() > 0
                                && archivedEntities.get(0) != null) {
                              return archivedEntities.get(0).getExplanation();
                            }
                          }
                          ]]>
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                  </Columns>
              </LiveReport>
            </value>
          </entry>
          </Map>
        </Attributes>
        <Signature>
            <Inputs>
                <Argument name="exclusions" type="boolean"></Argument>
                <Argument multi="true" name="certificationGroups" type="CertificationGroup"/>
                <Argument multi="true" name="applications" type="string">
                    <Description>rept_input_account_grp_cert_report_apps</Description>
                </Argument>
                <Argument name="creationDateStart" type="date">
                    <Description>rept_input_account_grp_cert_report_create_dt_start</Description>
                </Argument>
                <Argument name="creationDateEnd" type="date">
                    <Description>rept_input_account_grp_cert_report_create_dt_end</Description>
                </Argument>
                <Argument name="signedDateStart" type="date">
                    <Description>rept_input_account_grp_cert_report_signed_date_start</Description>
                </Argument>
                <Argument name="signedDateEnd" type="date">
                    <Description>rept_input_account_grp_cert_report_signed_date_end</Description>
                </Argument>
                <Argument name="expirationDateStart" type="date">
                    <Description>rept_input_account_grp_cert_report_exp_dt_start</Description>
                </Argument>
                <Argument name="expirationDateEnd" type="date">
                    <Description>rept_input_account_grp_cert_report_exp_dt_end</Description>
                </Argument>
                <Argument multi="true" name="tags" type="Tag">
                    <Description>rept_input_cert_report_tags</Description>
                </Argument>
            </Inputs>
        </Signature>
    </TaskDefinition>

   <TaskDefinition name="Account Group Members Report" executor="sailpoint.reporting.LiveReportExecutor"
                   subType="Account Group Reports" resultAction="Rename" template="true" type="LiveReport"
                   progressMode="Percentage">
       <Description>Displays Account Group members</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessAccountGroupMembershipReport"/>
        </RequiredRights>
       <Attributes>
         <Map>
           <entry key="report">
              <value>
                <LiveReport title="Account Group Membership Report">
                <DataSource objectType="IdentityEntitlement" type="Filter" defaultSort="application.name,value,identity.name">
                  <Join joinProperty="ManagedAttribute.value" property="value"/>
                  <Join joinProperty="ManagedAttribute.application" property="application"/>
                  <Join joinProperty="ManagedAttribute.attribute" property="name"/>
                  <QueryParameters>
                    <Parameter argument="application" property="application.id"/>
                      <Parameter defaultValue="true" property="ManagedAttribute.aggregated" valueClass="boolean"/>
                    <Parameter defaultValue="Connected" property="aggregationState" valueClass="sailpoint.object.IdentityEntitlement$AggregationState"/>
                  </QueryParameters>
                </DataSource>
                <Columns>
                  <ReportColumnConfig field="accountGroupName" header="rept_account_group_membership_col_account_group" property="value" sortable="true"/>
                  <ReportColumnConfig field="accountGroupDisplayName" header="rept_account_group_membership_col_account_group_display" property="value" scriptArguments="application.id,name" width="110">
                    <RenderScript>
                      <Source>
                            return sailpoint.api.Explanator.getDisplayValue(scriptArgs.get("application.id"), scriptArgs.get("name"), value);
                      </Source>
                    </RenderScript>
                  </ReportColumnConfig>
                  <ReportColumnConfig field="accountGroupType" header="rept_cert_col_type" property="ManagedAttribute.type" sortable="true"/>
                  <ReportColumnConfig field="application" header="rept_account_group_membership_col_app" property="application.name" sortable="true"/>
                  <ReportColumnConfig field="identity" header="rept_account_group_membership_col_identity" property="identity.displayName" sortable="true"/>
                </Columns>
              </LiveReport>
            </value>
          </entry>
         </Map>
       </Attributes>
       <Signature>
           <Inputs>
               <Argument multi="true" name="application" type="Application">
                   <Prompt>rept_app_account_grp_memb_input_application</Prompt>
                   <Description>rept_app_account_grp_memb_input_application_desc</Description>
               </Argument>
           </Inputs>
       </Signature>
   </TaskDefinition>

  <TaskDefinition name="Account Group Membership Totals Report" executor="sailpoint.reporting.LiveReportExecutor"
                   subType="Account Group Reports" resultAction="Rename" template="true" type="LiveReport"
                   progressMode="Percentage">
       <Description>Displays Account Group membership information</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessAccountGroupMembershipReport"/>
        </RequiredRights>
       <Attributes>
         <Map>
           <entry key="report">
              <value>
                <LiveReport title="Account Group Membership Totals Report">
                  <DataSource objectType="ManagedAttribute" type="Hql">
                    <Query>from ManagedAttribute m where aggregated=true</Query>
                    <QueryScript>
                      <Source>
                        <![CDATA[
                          import java.util.*;

                          List applications = args.get("application");
                          if (applications != null && !applications.isEmpty()){
                            query = query + " and application.id in(:application) ";
                          }

                          //We wont have membership on indirect groups
                          query = query + " and attribute is not null ";

                          return query;
                        ]]>
                      </Source>
                    </QueryScript>
                    <QueryParameters>
                      <Parameter argument="application" property="application"/>
                    </QueryParameters>
                  </DataSource>
                  <Columns>
                    <ReportColumnConfig field="accountGroupName" header="rept_app_account_grp_memb_col_name" property="value" sortable="true"/>
                    <ReportColumnConfig field="accountGroupDisplayName" header="rept_app_account_grp_display_name" property="displayName" sortable="true"/>
                    <ReportColumnConfig field="schemaObjectType" header="rept_cert_col_type" property="type" sortable="true"/>
                    <ReportColumnConfig field="application" header="rept_app_account_grp_memb_app" property="application.name" sortable="true"/>
                    <ReportColumnConfig field="total" header="rept_app_account_grp_memb_col_members" property="(select count(*) from IdentityEntitlement ie where ie.value = m.value and ie.application = m.application and ie.name = m.attribute and ie.aggregationState = 'Connected')" sortable="false"/>
                  </Columns>
                </LiveReport>
            </value>
          </entry>
         </Map>
       </Attributes>
       <Signature>
           <Inputs>
               <Argument multi="true" name="application" type="Application">
                   <Prompt>rept_app_account_grp_memb_input_application</Prompt>
                   <Description>rept_app_account_grp_memb_input_application_desc</Description>
               </Argument>
           </Inputs>
       </Signature>
   </TaskDefinition>

   <TaskDefinition name="User Account Attributes Report" executor="sailpoint.reporting.LiveReportExecutor"
                   subType="Identity and User Reports"
                   resultAction="Rename" progressMode="Percentage" template="true" type="LiveReport">
       <Description>Displays all attributes for a given account on each application</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessApplicationAccountAttributesReport"/>
        </RequiredRights>
       <Attributes>
         <Map>
           <entry key="report">
              <value>
                <LiveReport title="User Account Attributes Report">
                  <ExtendedColumnScript>
                    <Source>
                      <![CDATA[
                        import java.util.*;
                        import sailpoint.reporting.*;
                        import sailpoint.object.*;

                        List newCols = new ArrayList();
                        Map formValues = form.getFieldValues();
                        if (formValues != null && formValues.containsKey("application") && formValues.get("application") != null){
                          newCols = ReportingLibrary.createApplicationAttributeColumns(context, formValues.get("application"));
                        }

                        return newCols;
                      ]]>
                    </Source>
                  </ExtendedColumnScript>
                  <ReportForm>
                      <Reference class="sailpoint.object.Form" name="Application Account Attributes Report Form"/>
                  </ReportForm>
                  <DataSource objectType="sailpoint.object.Link" type="Filter">
                     <QueryParameters>
                      <Parameter argument="application" property="application.id"/>
                      <Parameter argument="inactive" property="identity.inactive" valueClass="boolean"/>
                    </QueryParameters>
                  </DataSource>
                  <Columns>
                    <ReportColumnConfig field="nativeIdentity" header="rept_app_account_attrs_col_account" property="nativeIdentity" sortable="true"/>
                    <ReportColumnConfig field="identityFirstname" header="firstname" property="identity.firstname" sortable="true"/>
                    <ReportColumnConfig field="identityLastname" header="lastname" property="identity.lastname" sortable="true"/>
                    <ReportColumnConfig field="identityEmail" header="email" property="identity.email" sortable="true"/>
                    <ReportColumnConfig field="identityManager" header="manager" property="identity.manager.name" sortable="true"/>
                  </Columns>
              </LiveReport>
            </value>
          </entry>
         </Map>
       </Attributes>
       <Signature>
           <Inputs>
               <Argument multi="false" name="application" type="Application" required="true">
                   <Description>rept_account_attributes_app_desc</Description>
               </Argument>
                <Argument name="inactive" type="string">
                    <Description>rept_input_user_report_inactive</Description>
                </Argument>
           </Inputs>
       </Signature>
   </TaskDefinition>

    <TaskDefinition name="Privileged Access Report" executor="sailpoint.reporting.LiveReportExecutor"
                    resultAction="Rename" progressMode="Percentage" subType="Identity and User Reports"
                    template="true" type="LiveReport">
        <Description>A detailed view of privileged users currently detected by IdentityIQ.</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessUserReport"/>
        </RequiredRights>
        <Attributes>
          <Map>
            <entry key="report">
              <value>
                <LiveReport title="Privileged Access Report">
                  <DataSource objectType="Link" type="Filter">
                     <QueryParameters>
                      <Parameter argument="managers" property="identity.manager.id"/>
                      <Parameter argument="applications" property="application.id"/>
                     </QueryParameters>
                  </DataSource>
                  <Columns>
                    <ReportColumnConfig field="user" header="rept_priv_user_username" property="displayName" sortable="true"/>
                    <ReportColumnConfig field="risk" header="rept_priv_user_risk_score" property="identity.scorecard.compositeScore" sortable="true"/>
                    <ReportColumnConfig field="firstname" header="rept_priv_user_first_name" property="identity.firstname" sortable="true"/>
                    <ReportColumnConfig field="lastname" header="rept_priv_user_last_name" property="identity.lastname" sortable="true"/>
                    <ReportColumnConfig field="manager" header="rept_priv_user_manager" property="identity.manager.displayName" sortable="true"/>
                    <ReportColumnConfig field="application" header="rept_priv_user_application" property="application.name" sortable="true"/>
                  </Columns>
                  <ReportForm>
                      <Reference class="sailpoint.object.Form" name="Privileged Access Report Form"/>
                  </ReportForm>
                  <InitializationRule>
                    <Reference class="sailpoint.object.Rule" name="Privileged Access Report Customizer"/>
                  </InitializationRule>
                  <ValidationRule>
                    <Reference class="sailpoint.object.Rule" name="Privileged Access Report Validation Rule"/>
                  </ValidationRule>
              </LiveReport>
            </value>
          </entry>
          </Map>
        </Attributes>
        <Signature>
            <Inputs>
                <Argument name="firstname" type="string">
                    <Description>rept_input_user_report_fname</Description>
                </Argument>
                <Argument name="lastname" type="string">
                    <Description>rept_input_user_report_lname</Description>
                </Argument>
                <Argument name="email" type="string">
                    <Description>rept_input_user_report_email</Description>
                </Argument>
                <Argument name="applications" type="Application">
                    <Description>rept_input_user_report_apps</Description>
                </Argument>
                <Argument multi="true" name="managers" type="Identity">
                    <Description>rept_input_user_report_mgrs</Description>
                </Argument>
            </Inputs>
        </Signature>
    </TaskDefinition>

    <TaskDefinition name="Role Change History Report" executor="sailpoint.reporting.LiveReportExecutor"
                    resultAction="Rename" subType="Role Management Reports"
                    template="true" type="LiveReport" progressMode="Percentage">
        <Description>A detailed view of the roles that have been recently changed</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessRoleChangeMgmtReport"/>
        </RequiredRights>
        <Attributes>
          <Map>
            <entry key="report">
              <value>
                <LiveReport title="Role Change Management Report">
                  <ReportForm>
                      <Reference class="sailpoint.object.Form" name="Role Change Management Report Form"/>
                  </ReportForm>
                  <DataSource type="Hql" objectType="Bundle">
                     <Query>from Bundle bundle, BundleArchive archive where archive.sourceId=bundle.id and
                       archive.version = (select max(archive2.version) from BundleArchive archive2 where archive2.sourceId=bundle.id %CREATED)</Query>
                     <QueryParameters>
                        <Parameter argument="applications" property="bundle.profiles.applications.id"/>
                        <Parameter argument="owners" property="bundle.owner.id"/>
                        <Parameter argument="type" property="bundle.type"/>
                        <Parameter argument="disabled" property="bundle.disabled" valueClass="boolean"/>
                        <Parameter argument="createStart" property="archive2.created"  operation="GE"
                                   valueClass="date"/>
                        <Parameter argument="createEnd" property="archive2.created" operation="LE" valueClass="date"/>
                     </QueryParameters>
                     <QueryScript>
                       <Source>
                          <![CDATA[
                              import sailpoint.reporting.ReportingLibrary;

                              String dateClause = "";
                              if (args.get("createStart") != null){
                                 dateClause += " and archive2.created>=:createStart ";
                              }
                              if (args.get("createEnd") != null){
                                 dateClause += " and archive2.created<=:createEnd ";
                              }

                              query = query.replace("%CREATED", dateClause);

                              StringBuffer queryBuffer = new StringBuffer(query);

                              List clauseItems = new ArrayList();

                              String typeClause = ReportingLibrary.buildHqlFilter("type", "bundle.type", args);
                              if (typeClause != null)
                                clauseItems.add(typeClause);

                              String ownerClause = ReportingLibrary.buildHqlFilter("owners", "bundle.owner.id", args);
                              if (ownerClause != null)
                                clauseItems.add(ownerClause);

                              String disabledClause = ReportingLibrary.buildHqlFilter("disabled", "bundle.disabled", args);
                              if (disabledClause != null)
                                clauseItems.add(disabledClause);

                              String appsClause = ReportingLibrary.buildHqlFilter("applications", "profile.application.id", args);
                              if (appsClause != null){
                                queryBuffer.insert(query.indexOf("where"), " inner join bundle.profiles as profile ");
                                clauseItems.add(appsClause);
                              }

                              if (!clauseItems.isEmpty()){
                                 for(String c : clauseItems){
                                    queryBuffer.append(" and " + c);
                                 }
                              }

                              return queryBuffer.toString();
                          ]]>
                       </Source>
                     </QueryScript>
                  </DataSource>
                  <Columns>
                    <ReportColumnConfig field="role" header="rept_role_change_mgmt_name" property="bundle.name"
                                        sortable="true"/>
                    <ReportColumnConfig field="type" header="rept_role_change_mgmt_type" property="bundle.type"
                                        sortable="true">
                      <RenderScript>
                        <Source>
                          <![CDATA[
                              import sailpoint.tools.Message;
                              import sailpoint.reporting.ReportingLibrary;
                              if (value != null){
                                String displayName = ReportingLibrary.getRoleTypeDisplayName(value);
                                if (displayName != null){
                                  return Message.localize("rept_change_mgmt_role_type_desc", new String[]{value, displayName});
                                }
                              }

                              return value;
                          ]]>
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="version" header="rept_role_change_mgmt_version"
                                        property="archive.version" sortable="true"/>
                    <ReportColumnConfig field="changeDate" header="rept_role_change_mgmt_date"
                                        property="archive.created" sortable="true"/>
                    <ReportColumnConfig field="approver" header="rept_role_change_mgmt_approver"
                                        property="archive.creator" sortable="true"/>
                    <ReportColumnConfig field="disabled" header="rept_role_change_mgmt_status"
                                        property="bundle.disabled" sortable="true">
                       <RenderScript>
                        <Source>
                          <![CDATA[
                              import sailpoint.tools.Message;
                              import sailpoint.tools.Util;
                              return Util.otob(value) ? Message.localize("rept_change_mgmt_status_disabled") :
                                Message.localize("rept_change_mgmt_status_enabled");
                          ]]>
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                  </Columns>
              </LiveReport>
            </value>
          </entry>
          </Map>
        </Attributes>
        <Signature>
            <Inputs>
               <Argument name="applications" type="Application" multi="true" >
                   <Description>rept_input_biz_role_report_apps</Description>
               </Argument>
               <Argument multi="true" name="type" type="string">
                   <Description>rept_input_biz_role_report_type</Description>
               </Argument>
               <Argument name="owners" type="Identity" multi="true">
                   <Description>rept_input_biz_role_report_owners</Description>
               </Argument>
               <Argument name="createStart" type="date"/>
               <Argument name="createEnd" type="date"/>
               <Argument name="disabled" type="string"/>
            </Inputs>
        </Signature>
    </TaskDefinition>

    <TaskDefinition name="User Authentication Question Status Report" executor="sailpoint.reporting.LiveReportExecutor"
                    resultAction="Rename" progressMode="Percentage" subType="Identity and User Reports"
                    template="true" type="LiveReport">
        <Description>Displays information about users with insufficient challenge questions.</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessApplicationUserReport"/>
        </RequiredRights>
        <Attributes>
          <Map>
             <entry key="report">
              <value>
                <LiveReport title="User Authentication Question Status Report">
                  <DataSource objectType="Identity" type="Filter">
                     <QueryParameters>
                      <Parameter argument="identities" property="id"/>
                      <Parameter argument="lastRefreshStart" property="lastRefresh" operation="GT"/>
                      <Parameter argument="lastRefreshEnd" property="lastRefresh" operation="LT"/>
                      <Parameter argument="lastLoginStart" property="lastLogin" operation="GT"/>
                      <Parameter argument="lastLoginEnd" property="lastLogin" operation="LT"/>
                      <Parameter argument="applications" property="links.application.id"/>
                      <Parameter argument="capabilities" property="capabilities.id"/>
                      <Parameter argument="businessRoles">
                        <QueryScript>
                          <Source>
                            import sailpoint.object.*;
                            import java.lang.*;
                            List roleFilters = new ArrayList();
                            if (value != null){
                              for(String role : value){
                                roleFilters.add(Filter.eq("bundles.id", role));
                                roleFilters.add(Filter.eq("assignedRoles.id", role));
                              }

                              if (!roleFilters.isEmpty())
                                queryOptions.addFilter(Filter.subquery("id", Identity.class, "id", Filter.or(roleFilters)));

                            }
                            return queryOptions;
                          </Source>
                        </QueryScript>
                      </Parameter>
                      <Parameter argument="groupDefinitions">
                        <QueryScript>
                          <Source>
                            import sailpoint.object.*;
                            import sailpoint.reporting.*;
                            Filter f = ReportingLibrary.getGroupDefinitionFilter(context, value, false);
                            if(f!=null) {
                                queryOptions.addFilter(f);
                            }
                            return queryOptions;
                          </Source>
                        </QueryScript>
                      </Parameter>
                     </QueryParameters>
                  </DataSource>
                  <InitializationRule>
                    <Reference class="sailpoint.object.Rule" name="Identity Report Form Customizer"/>
                  </InitializationRule>
                  <ReportForm>
                      <Reference class="sailpoint.object.Form" name="User Authentication Question Status Report Form"/>
                  </ReportForm>
                  <Columns>
                    <ReportColumnConfig field="username" header="rept_users_auth_col_user" property="name" sortable="true"/>
                    <ReportColumnConfig field="firstname" header="rept_users_auth_col_fame" property="firstname" sortable="true"/>
                    <ReportColumnConfig field="lastname" header="rept_users_auth_col_lname" property="lastname" sortable="true"/>
                    <ReportColumnConfig field="email" header="rept_users_auth_col_email" property="email" sortable="true"/>
                    <ReportColumnConfig field="manager" header="rept_users_auth_col_manager" property="manager.displayName" sortable="true"/>
                    <ReportColumnConfig field="lastLogin" header="rept_users_auth_col_last_login" property="lastLogin" sortable="true"/>
                    <ReportColumnConfig field="questions" header="rept_users_auth_col_questions" property="id" sortable="false">
                      <RenderScript>
                        <Source>
                          import sailpoint.object.*;

                          Integer required = renderCache.get("requiredAuthQuestions");
                          if (required == null){
                            required = context.getConfiguration().getInt( Configuration.NUM_AUTH_QUESTION_ANSWERS_REQUIRED );
                            renderCache.put("requiredAuthQuestions", required);
                          }

                          QueryOptions ops = new QueryOptions();
                          ops.addFilter(Filter.eq("identity.id", value));
                          ops.addFilter(Filter.notnull("question"));
                          return context.countObjects(AuthenticationAnswer.class, ops) + "/" + required;
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                  </Columns>
              </LiveReport>
            </value>
          </entry>
          </Map>
        </Attributes>
        <Signature>
            <Inputs>
                <Argument multi="true" name="groupDefinitions" type="string">
                    <Description>rept_input_user_report_group_definition</Description>
                </Argument>
                <Argument name="capabilities" type="string">
                    <Description>rept_input_user_report_capabilities</Description>
                </Argument>
                <Argument name="lastLoginStart" type="date">
                    <Description>rept_input_user_report_last_login</Description>
                </Argument>
                <Argument name="lastLoginEnd" type="date">
                    <Description>rept_input_user_report_last_login</Description>
                </Argument>
                <Argument name="lastRefreshStart" type="date">
                    <Description>rept_input_user_report_last_refresh</Description>
                </Argument>
                <Argument name="lastRefreshEnd" type="date">
                    <Description>rept_input_user_report_last_refresh</Description>
                </Argument>
                <Argument multi="true" name="businessRoles" type="Bundle">
                    <Description>rept_input_user_report_biz_roles</Description>
                </Argument>
                <Argument multi="true" name="applications" type="Application">
                    <Description>rept_input_user_report_apps</Description>
                </Argument>
                <Argument multi="true" name="managers" type="Identity">
                    <Description>rept_input_user_report_mgrs</Description>
                </Argument>
            </Inputs>
        </Signature>
    </TaskDefinition>

    <TaskDefinition name="Identity Status Summary Report" executor="sailpoint.reporting.LiveReportExecutor"
                    resultAction="Rename" progressMode="Percentage"
                    subType="Identity and User Reports" template="true" type="LiveReport">
        <Description>Displays summary of active, inactive and total identites</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessIdentityCubeSummaryReport"/>
        </RequiredRights>
        <Attributes>
            <Map>
                <entry key="report">
                  <value>
                    <LiveReport title="Identity Status Report">
                      <DataSource objectType="Identity" type="Filter">
                      </DataSource>
                      <Columns>
                        <ReportColumnConfig field="identity" header="rept_identity_status_summary_name" property="name" sortable="true"/>
                        <ReportColumnConfig field="displayName" header="rept_identity_status_summary_display_name" property="displayName" sortable="true"/>
                        <ReportColumnConfig field="status" header="rept_identity_status_summary_status" property="inactive" sortable="true"/>
                      </Columns>
                      <ReportSummary title="rept_identity_status_summary_summary_title">
                        <Values>
                          <LiveReportSummaryValue name="active" label="rept_identity_status_summary_active_identities"/>
                          <LiveReportSummaryValue name="inactive" label="rept_identity_status_summary_inactive_identities"/>
                          <LiveReportSummaryValue name="total" label="rept_identity_status_summary_total_identities"/>
                        </Values>
                        <DataSourceScript>
                          <Source>
                            <![CDATA[
                            import java.util.*;
                            import sailpoint.object.*;
                            import java.lang.*;

                            QueryOptions queryOptions = baseQueryOptions;

                            queryOptions.addGroupBy("inactive");
                            List fields = new ArrayList();
                            fields.add("inactive");
                            fields.add("count(*)");

                            int inactive = 0;
                            int active = 0;
                            Iterator results = context.search(Identity.class, queryOptions, fields);
                            while(results.hasNext()){
                                Object[] row = results.next();
                                int count = row[1] != null ? row[1].intValue() : 0;
                                if (row[0]){
                                  inactive = count;
                                }else {
                                  active = count;
                                }
                            }

                            Map map = new HashMap();
                            map.put("total", inactive + active);
                            map.put("inactive", inactive);
                            map.put("active", active);

                            return map;
                            ]]>
                          </Source>
                        </DataSourceScript>
                      </ReportSummary>
                  </LiveReport>
                  </value>
                </entry>
            </Map>
        </Attributes>
        <Signature/>
    </TaskDefinition>

    <TaskDefinition executor="sailpoint.reporting.IdentityHistoryExport" hidden="true" name="Identity History Export" resultAction="Rename" subType="Search" template="true" type="GridReport">
      <Attributes>
        <Map>
          <entry key="jasperTemplate" value="IdentityHistoryExport"/>
        </Map>
      </Attributes>
      <Description>
          Report created by the user from the Identity - History tab
      </Description>
      <Signature>
        <Inputs>
          <Argument multi="true" name="columns" type="string">
            <Description>rept_input_search_report_columns</Description>
          </Argument>
          <Argument multi="true" name="filters" type="Filter">
            <Description>rept_input_search_report_filters</Description>
          </Argument>
          <Argument name="REPORT_MAX_COUNT" type="int">
            <Description>rept_input_max_rows</Description>
          </Argument>
        </Inputs>
      </Signature>
    </TaskDefinition>

    <TaskDefinition name="Entitlement Owner Access Review Live Report"
                    executor="sailpoint.reporting.LiveReportExecutor" resultAction="Rename"
                    subType="Access Review and Certification Reports"
                    template="true" type="LiveReport" progressMode="Percentage">
        <Description>Displays information about the entitlement owner certifications in detailed format.</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessEntitlementOwnerAccessReviewReport"/>
        </RequiredRights>
        <Attributes>
          <Map>
            <entry key="report">
              <value>
                <LiveReport title="Certification Report">
                  <InitializationRule>
                    <Reference class="sailpoint.object.Rule" name="Certification Report Customizer"/>
                  </InitializationRule>
                  <ReportForm>
                      <Reference class="sailpoint.object.Form" name="Entitlement Owner Access Review Report Form"/>
                  </ReportForm>
                  <DataSource objectType="CertificationItem" dataSourceClass="sailpoint.reporting.datasource.CertificationLiveReportDataSource" type="Java">
                     <QueryParameters>
                      <Parameter argument="type" defaultValue="DataOwner" property="parent.certification.type" valueClass="sailpoint.object.Certification$Type"/>
                      <Parameter argument="tags" property="parent.certification.tags.id"/>
                      <Parameter argument="certificationGroups" property="parent.certification.certificationGroups.id"/>
                      <Parameter argument="applications" property="parent.application">
                         <ValueScript>
                          <Source>
                            import sailpoint.object.*;
                            import sailpoint.api.ObjectUtil;
                            if (value != null){
                              return ObjectUtil.convertIdsToNames(context, Application.class, value);
                            }
                            return null;
                          </Source>
                        </ValueScript>
                      </Parameter>
                       <Parameter argument="creationDateStart" property="parent.certification.created" operation="GT"/>
                      <Parameter argument="creationDateEnd" property="parent.certification.created" operation="LT"/>
                      <Parameter argument="signedDateStart" property="parent.certification.signed"  operation="GT"/>
                      <Parameter argument="signedDateEnd" property="parent.certification.signed" operation="LT"/>
                      <Parameter argument="expirationDateStart" property="parent.certification.expiration"
                                 operation="GT"/>
                      <Parameter argument="expirationDateEnd" property="parent.certification.expiration"
                                 operation="LT"/>
                    </QueryParameters>
                  </DataSource>
                  <Chart title="rept_cert_chart_title" type="pie" groupBy="action.status" category="action.status" value="count(*)" nullCategory="cert_action_open"/>
                  <ReportSummary title="rept_cert_summary_title">
                    <Values>
                      <LiveReportSummaryValue name="certifications" label="reprt_cert_summary_total_certs"/>
                      <LiveReportSummaryValue name="accessReviews" label="reprt_cert_summary_total_access_reviews"/>
                      <LiveReportSummaryValue name="entitlements" label="reprt_cert_summary_total_entitlements"/>
                      <LiveReportSummaryValue name="items" label="reprt_cert_summary_total_items"/>
                    </Values>
                    <DataSourceScript>
                      <Source>
                        <![CDATA[
                        import java.util.*;
                        import sailpoint.object.*;

                        QueryOptions ops = baseQueryOptions;

                        List fields = new ArrayList();
                        fields.add("count(*)");
                        fields.add("count(distinct parent.id)");
                        fields.add("count(distinct parent.certification.id)");
                        fields.add("count(distinct parent.certification.certificationGroups.id)");

                        Iterator iter = context.search(CertificationItem.class, ops, fields);

                        Map map = new HashMap();

                        if (iter.hasNext()){
                          Object[] results = iter.next();
                          map.put("certifications", results[3]);
                          map.put("accessReviews", results[2]);
                          map.put("entitlements", results[1]);
                          map.put("items", results[0]);
                        }

                        return map;
                        ]]>
                      </Source>
                    </DataSourceScript>
                  </ReportSummary>
                  <Columns>
                    <ReportColumnConfig field="application" header="rept_data_owner_col_app" property="exceptionEntitlements.application" sortable="true"/>
                    <ReportColumnConfig field="entitlement" header="rept_data_owner_col_description" property="exceptionEntitlements"  sortable="false">
                      <RenderScript>
                        <Source>
                            if(value instanceof sailpoint.object.EntitlementSnapshot){
                                return sailpoint.api.EntitlementDescriber.summarize(value);
                            }
                            return "";
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="schemaObjectType" header="rept_data_owner_col_schema_object_type" property="parent.schemaObjectType" sortable="true"/>
                    <ReportColumnConfig field="accountName" header="rept_data_owner_col_account_name" property="exceptionEntitlements.displayName" ifEmpty="exceptionEntitlements.nativeIdentity" sortable="true"/>
                    <ReportColumnConfig field="firstName" header="rept_cert_col_first_name" property="targetId" sortable="false">
                      <RenderScript>
                        <Source>
                          return sailpoint.reporting.ReportingLibrary.getColumnValue(context, sailpoint.object.Identity.class, value, "firstname");
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="lastName" header="rept_cert_col_last_name" property="targetId" sortable="false">
                      <RenderScript>
                        <Source>
                          return sailpoint.reporting.ReportingLibrary.getColumnValue(context, sailpoint.object.Identity.class, value, "lastname");
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="manager" header="rept_cert_col_manager_name" property="targetId">
                      <RenderScript>
                        <Source>
                          <![CDATA[
                            return sailpoint.reporting.ReportingLibrary.getColumnValue(context, sailpoint.object.Identity.class, value, "manager.name");
                          ]]>
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="certName" header="rept_data_owner_col_cert_access_review" property="parent.certification.name" sortable="true"/>
                    <ReportColumnConfig field="certGroupName" header="rept_data_owner_col_cert_grp_name" property="parent.certification.certificationGroups.name" sortable="true"/>
                    <ReportColumnConfig field="tags" header="rept_cert_col_tags" property="parent.certification.tags.name" subQueryKey="id"/>
                    <ReportColumnConfig field="status" header="rept_cert_col_status" property="summaryStatus" sortable="true"/>
                    <ReportColumnConfig field="decision" header="rept_cert_col_decision" property="action.status" sortable="true"/>
                    <ReportColumnConfig field="remediationCompleted" header="rept_cert_col_revoke_completed" property="action" sortable="false">
                      <RenderScript>
                        <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          import sailpoint.tools.Util;
                          import java.lang.String;
                          String status = ReportingLibrary.getRemediationStatus(context, value);
                          return Util.isNullOrEmpty(status) ? "" : status;
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="decisionMaker" header="rept_cert_col_decision_maker" property="action.actorName" sortable="true"/>
                    <ReportColumnConfig field="comments" header="rept_cert_col_decision_maker_comments" property="action">
                        <RenderScript>
                            <Source>
                                return value != null ? value.getComments() : null;
                            </Source>
                        </RenderScript>
                    </ReportColumnConfig>
                    <ReportColumnConfig field="exclusionExplanation" header="rept_cert_col_exclusion_explanation" property="parent.certification" sortable="false">
                      <RenderScript>
                        <Source>
                          <![CDATA[
                          if (value != null){
                            List archivedEntities = value.fetchArchivedEntities(context);
                            if (archivedEntities != null
                                && archivedEntities.size() > 0
                                && archivedEntities.get(0) != null) {
                              return archivedEntities.get(0).getExplanation();
                            }
                          }
                          ]]>
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                  </Columns>
              </LiveReport>
            </value>
          </entry>
          </Map>
        </Attributes>
        <Signature>
            <Inputs>
                <Argument multi="true" name="certificationGroups" type="CertificationGroup"/>
                <Argument name="exclusions" type="boolean"></Argument>
                <Argument multi="true" name="applications" type="string">
                    <Description>rept_input_account_grp_cert_report_apps</Description>
                </Argument>
                <Argument name="creationDateStart" type="date">
                    <Description>rept_input_account_grp_cert_report_create_dt_start</Description>
                </Argument>
                <Argument name="creationDateEnd" type="date">
                    <Description>rept_input_account_grp_cert_report_create_dt_end</Description>
                </Argument>
                <Argument name="signedDateStart" type="date">
                    <Description>rept_input_account_grp_cert_report_signed_date_start</Description>
                </Argument>
                <Argument name="signedDateEnd" type="date">
                    <Description>rept_input_account_grp_cert_report_signed_date_end</Description>
                </Argument>
                <Argument name="expirationDateStart" type="date">
                    <Description>rept_input_account_grp_cert_report_exp_dt_start</Description>
                </Argument>
                <Argument name="expirationDateEnd" type="date">
                    <Description>rept_input_account_grp_cert_report_exp_dt_end</Description>
                </Argument>
                <Argument multi="true" name="tags" type="Tag">
                    <Description>rept_input_cert_report_tags</Description>
                </Argument>
            </Inputs>
        </Signature>
    </TaskDefinition>

   <!-- 
    -
    - Report for Identity Entitlements
    -
    - since 6.0
    -    
    -->    
   <TaskDefinition name="Identity Entitlements Detail Report" 
                   executor="sailpoint.reporting.LiveReportExecutor"
                   subType="Identity and User Reports"
                   resultAction="Rename"
                   progressMode="Percentage"                    
                   template="true" 
                   type="LiveReport">
                   
        <Description>Displays identity/account entitlement information.</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessIdentityEntitlementReport"/>
        </RequiredRights>
        <Attributes>
          <Map>
            <entry key="report">
              <value>
                <LiveReport title="Identity Entitlements Report">
                  <ReportForm>
                      <Reference class="sailpoint.object.Form" name="Identity Entitlements Report Search Fields"/>
                  </ReportForm>
                  <DataSource objectType="IdentityEntitlement" type="Filter">
                     <QueryParameters>
                      <Parameter argument="identity" property="identity.id"/>
                      <Parameter argument="application" property="application.id"/>
                      <Parameter argument="attribute" property="name"/>
                      <Parameter argument="entitlementValue" property="value"/>
                      <Parameter argument="accountId" property="nativeIdentity"/>
                      <Parameter argument="instance" property="instance"/>
                      <Parameter argument="source" property="source"/>                   
                        
                      <Parameter argument="aggregationState" property="aggregationState">
                       <QueryScript>
                          <Source>
                            import sailpoint.object.Filter;
                            import sailpoint.object.IdentityEntitlement.AggregationState;
                            import sailpoint.tools.Util;
                            
                            // "null" indicates include all
                            if ( Util.getString((String)value) != null ) {
                                if ( Util.nullSafeEq("Connected", (String)value) ) {
                                    queryOptions.addFilter(Filter.eq("aggregationState", AggregationState.Connected));                                   
                                } else {
                                    queryOptions.addFilter(Filter.eq("aggregationState", AggregationState.Disconnected));
                                }
                            }
                            return queryOptions;
                          </Source>
                        </QueryScript>
                      </Parameter>
                      <Parameter argument="type" property="type">
                        <QueryScript>
                          <Source>
                            import sailpoint.object.Filter;
                            import sailpoint.object.IdentityEntitlement.AggregationState;
                            import sailpoint.tools.Util;
                            
                            // "null" indicates include all
                            if ( Util.getString((String)value) != null ) {
                                queryOptions.addFilter(Filter.eq("type", value));                                   
                            }
                            return queryOptions;
                          </Source>
                        </QueryScript>
                      </Parameter>
                      <Parameter argument="allowed" property="allowed" valueClass="boolean"/>                      
                      <Parameter argument="assigned" property="assigned" valueClass="boolean"/>                        
                      <Parameter argument="grantedByRole" property="grantedByRole" valueClass="boolean"/>                      
                      <Parameter argument="assigner" property="assigner"/>                      

                      <Parameter argument="pendingRequest" property="pendingRequestItem">
                        <QueryScript>
                          <Source>
                            import sailpoint.object.*;
                            import sailpoint.tools.*;

                            // "null" indicates no value
                            if ( Util.getString((String)value) != null ) {
                                boolean bool = Util.otob(value);
                                if ( !bool ) 
                                    queryOptions.addFilter(Filter.isnull(property));
                                else 
                                    queryOptions.addFilter(Filter.notnull(property));
                                    
                            }
                            return queryOptions;
                          </Source>
                        </QueryScript>
                      </Parameter>
                      
                      <Parameter argument="currentRequest" property="requestItem">
                        <QueryScript>
                          <Source>
                            import sailpoint.object.*;
                            import sailpoint.tools.*;

                            // "null" indicates no value
                            if ( Util.getString((String)value) != null ) {
                                boolean bool = Util.otob(value);
                                if ( !bool ) 
                                    queryOptions.addFilter(Filter.isnull(property));
                                else 
                                    queryOptions.addFilter(Filter.notnull(property));
                                    
                            }
                            return queryOptions;
                          </Source>
                        </QueryScript>
                      </Parameter>

                      <Parameter argument="pendingCertification" property="pendingCertificationItem">
                        <QueryScript>
                          <Source>
                            import sailpoint.object.*;
                            import sailpoint.tools.*;

                            // "null" indicates no value
                            if ( Util.getString((String)value) != null ) {
                                boolean bool = Util.otob(value);
                                if ( !bool ) 
                                    queryOptions.addFilter(Filter.isnull(property));
                                else 
                                    queryOptions.addFilter(Filter.notnull(property));
                                    
                            }
                            return queryOptions;
                          </Source>
                        </QueryScript>
                      </Parameter>
                      
                      <Parameter argument="certified" property="certificationItem">
                        <QueryScript>
                          <Source>
                            import sailpoint.object.*;
                            import sailpoint.tools.*;

                            // "null" indicates no value
                            if ( Util.getString((String)value) != null ) {
                                boolean bool = Util.otob(value);
                                if ( !bool ) 
                                    queryOptions.addFilter(Filter.isnull(property));
                                else 
                                    queryOptions.addFilter(Filter.notnull(property));
                                    
                            }
                            return queryOptions;
                          </Source>
                        </QueryScript>
                      </Parameter>
                    </QueryParameters>
                  </DataSource>
                  <Columns>
                    <ReportColumnConfig field="identity" header="identity" property="identity.displayName" sortable="true" width="110"/>
                    <ReportColumnConfig field="application" header="label_application" property="application.name" sortable="true" width="110"/>
                    <ReportColumnConfig field="attribute" header="label_attribute" property="name" sortable="true" width="110"/>
                    <ReportColumnConfig field="value" header="entitlement" property="value" sortable="true" width="110"/>   
                    <ReportColumnConfig field="accountId" header="account_name" property="nativeIdentity" sortable="true" width="110"/>
                    <ReportColumnConfig field="instance" header="instance" property="instance" sortable="true" width="110"/>                                     
                    <ReportColumnConfig field="source" header="identity_entitlements_source" property="source" sortable="true" width="110"/>
                    <ReportColumnConfig field="aggregationState" header="identity_entitlements_aggregation_state_display" property="aggregationState"/>                    
                    <ReportColumnConfig field="type" header="srch_input_def_entitlement_type" property="type" sortable="true" width="110"/>
                    <ReportColumnConfig field="allowed" header="identity_entitlements_allowed" property="allowed" sortable="true" width="110"/>
                    <ReportColumnConfig field="assigned" header="identity_entitlements_assigned" property="assigned" sortable="true" width="110"/>
                    <ReportColumnConfig field="grantedByRole" header="identity_entitlements_granted_by_role" property="grantedByRole" sortable="true" width="110"/>                    
                    <ReportColumnConfig field="assigner" header="identity_entitlements_assigner" property="assigner" sortable="true" width="110"/>                    
                    <ReportColumnConfig field="lastCertName" header="identity_entitlements_cert_last" property="certificationItem.parent.certification.name" sortable="true" width="110"/>
                    <ReportColumnConfig field="lastCertDate" header="identity_entitlements_cert_last_date" property="certificationItem.modified" sortable="true" width="110"/>
                    <ReportColumnConfig field="lastRequestId" header="identity_entitlements_request_id" property="requestItem.identityRequest.name" sortable="true" width="110"/>
                  </Columns>
              </LiveReport>
            </value>
          </entry>
          </Map>
        </Attributes>
        <Signature>
            <Inputs>
                <Argument multi="true" name="identity" type="Identity">
                  <Prompt>identities</Prompt>
                  <Description>Identities to include in the report</Description>
                </Argument>               
                <Argument multi="true" name="application" type="Application">
                  <Prompt>applications</Prompt>                
                  <Description>Applications to include in the report</Description>
                </Argument>
                <Argument name="attribute" multi="true">
                  <Description>Attirubtes to include in the report</Description>
                  <Prompt>attribute</Prompt>           
                </Argument>        
                <Argument name="entitlementValue" multi="true">
                  <Description>Attirubtes to include in the report</Description>
                  <Prompt>attribute</Prompt>           
                </Argument>       
                <Argument name="accountId" >
                    <Description>Account ids to include in the report</Description>
                    <Prompt>account_name</Prompt>    
                </Argument>
                <Argument name="instance">
                   <Description>Instances to include</Description>
                   <Prompt>instance</Prompt>                        
                </Argument>                
                <Argument name="source" type="string">
                  <Description>Include only Entitlements with a specific source</Description>
                  <Prompt>identity_entitlements_source</Prompt> 
                </Argument>
                <Argument name="aggregationState" type="string">
                    <Description>Include only connected or disconnected entitlements</Description>
                    <Prompt>identity_entitlements_aggregation_state_display</Prompt>
                </Argument>       
                <Argument name="type" type="string">
                    <Description>Include only certain types of permissions. Either Permission or Entitlement</Description>
                    <Prompt>srch_input_def_entitlement_type</Prompt>
                </Argument>     
                <Argument name="allowed" type="string">
                    <Description>Include only allowed entitlements</Description>
                    <Prompt>identity_entitlements_role_allowed</Prompt>
                </Argument>  
                <Argument name="assigned" type="string">
                    <Description>Include only entitlements that are assigned</Description>
                    <Prompt>identity_entitlements_assigned</Prompt>
                </Argument>
                <Argument name="grantedByRole" type="string">
                    <Description>Include only entitlements granted by a role.</Description>
                    <Prompt>granted</Prompt>
                </Argument>
                <Argument name="pendingRequest" type="string">
                    <Description>Include only entitlements that have a pending access request.</Description>
                    <Prompt>pendingRequest</Prompt>
                </Argument>
                <Argument name="currentRequest" type="string">
                    <Description>Include only entitlements that have a current access request.</Description>
                    <Prompt>pendingRequest</Prompt>
                </Argument>
                <Argument name="pendingCertification" type="string">
                    <Description>Include only entitlements that have a pending certification.</Description>
                    <Prompt>pendingCertification</Prompt>
                </Argument>
                <Argument name="certified" type="string">
                    <Description>Include only entitlements that have been certified.</Description>
                    <Prompt>certified</Prompt>
                </Argument>
                
            </Inputs>            
        </Signature>
    </TaskDefinition>

    <TaskDefinition name="Identity Effective Access Live Report" executor="sailpoint.reporting.LiveReportExecutor"
                    resultAction="Rename"
                    progressMode="String" subType="Identity and User Reports" template="true" type="LiveReport">
        <Description>Displays the effective access of an identity</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessIdentityEffectiveAccessReport"/>
        </RequiredRights>
        <Attributes>
            <Map>
                <entry key="report">
              <value>
                <LiveReport title="Identity Effective Access Live Report" disablePreview="true">
                  <InitializationRule>
                    <Reference class="sailpoint.object.Rule" name="Identity Report Form Customizer"/>
                  </InitializationRule>
                  <ReportForm>
                      <Reference class="sailpoint.object.Form" name="Identity Effective Access Options Form"/>
                  </ReportForm>
                  <DataSource objectType="Identity" type="Java"
                              dataSourceClass="sailpoint.reporting.datasource.IdentityEffectiveEntitlementsDataSource">
                     <QueryParameters>
                      <Parameter argument="identities" property="id"/>
                      <Parameter argument="lastRefresh" property="lastRefresh" valueClass="daterange"/>
                      <Parameter argument="lastLogin" property="lastLogin" valueClass="daterange"/>
                      <Parameter argument="applications" property="links.application.id"/>
                      <Parameter argument="capabilities" property="capabilities.id"/>
                      <Parameter argument="businessRoles">
                        <QueryScript>
                          <Source>
                            import sailpoint.object.*;
                            import java.lang.*;
                            List roleFilters = new ArrayList();
                            if (value != null){
                              for(String role : value){
                                roleFilters.add(Filter.eq("bundles.id", role));
                                roleFilters.add(Filter.eq("assignedRoles.id", role));
                              }

                              if (!roleFilters.isEmpty())
                                queryOptions.addFilter(Filter.subquery("id", Identity.class, "id", Filter.or(roleFilters)));

                            }
                            return queryOptions;
                          </Source>
                        </QueryScript>
                      </Parameter>
                      <Parameter argument="groupDefinitions">
                        <QueryScript>
                          <Source>
                            import sailpoint.object.*;
                            import sailpoint.reporting.*;
                            Filter f = ReportingLibrary.getGroupDefinitionFilter(context, value, false);
                            if(f!=null) {
                                queryOptions.addFilter(f);
                            }
                            return queryOptions;
                          </Source>
                        </QueryScript>
                      </Parameter>
                     </QueryParameters>
                  </DataSource>
                  <Columns>
                    <ReportColumnConfig field="identity" header="identity" property="name" sortable="true"/>
                    <ReportColumnConfig field="displayName" header="rept_identity_effective_access_report_header_display_name" property="displayName" sortable="true"/>
                    <ReportColumnConfig field="firstname" header="rept_identity_effective_access_report_header_first_name" property="firstname" sortable="true"/>
                    <ReportColumnConfig field="lastname" header="rept_identity_effective_access_report_header_last_name" property="lastname" sortable="true"/>
                    <ReportColumnConfig field="application" header="rept_identity_effective_access_report_header_app" sortable="false"/>
                    <ReportColumnConfig field="account" header="rept_identity_effective_access_report_header_account" sortable="false"/>
                    <ReportColumnConfig field="entitlement" header="rept_identity_effective_access_report_header_entitlement" sortable="false"/>
                    <ReportColumnConfig field="value" header="rept_identity_effective_access_report_header_value" sortable="false"/>
                    <ReportColumnConfig field="accountGroup" header="rept_identity_effective_access_report_header_account_group" sortable="false"/>
                    <ReportColumnConfig field="detectedRole" header="rept_identity_effective_access_report_header_detected_role" sortable="false"/>
                    <ReportColumnConfig field="assignedRole" header="rept_identity_effective_access_report_header_assigned_role" sortable="false"/>
                  </Columns>
              </LiveReport>
            </value>
          </entry>
            </Map>
        </Attributes>
        <Signature>
            <Inputs>
                <Argument multi="true" name="identities" type="Identity">
                    <Description>rept_input_user_report_identities</Description>
                </Argument>
                <Argument multi="true" name="groupDefinitions" type="string">
                    <Description>rept_input_user_report_group_definition</Description>
                </Argument>
                <Argument name="firstname" type="string">
                    <Description>rept_input_user_report_fname</Description>
                </Argument>
                <Argument name="lastname" type="string">
                    <Description>rept_input_user_report_lname</Description>
                </Argument>
                <Argument name="capabilities" type="string">
                    <Description>rept_input_user_report_capabilities</Description>
                </Argument>
                <Argument name="inactive" type="boolean">
                    <Description>rept_input_user_report_inactive</Description>
                </Argument>
                <Argument name="lastLoginType" type="string">
                    <Description>rept_input_user_report_last_login_type</Description>
                </Argument>
                <Argument name="lastLogin" type="date">
                    <Description>rept_input_user_report_last_login</Description>
                </Argument>
                <Argument name="lastRefreshType" type="string">
                    <Description>rept_input_user_report_last_refresh_type</Description>
                </Argument>
                <Argument name="lastRefresh" type="date">
                    <Description>rept_input_user_report_last_refresh</Description>
                </Argument>
                <Argument name="email" type="string">
                    <Description>rept_input_user_report_email</Description>
                </Argument>
                <Argument multi="true" name="noBusinessRoles" type="boolean">
                    <Description>rept_input_user_report_no_biz_roles</Description>
                </Argument>
                <Argument multi="true" name="businessRoles" type="Bundle">
                    <Description>rept_input_user_report_biz_roles</Description>
                </Argument>
                <Argument multi="true" name="applications" type="Application">
                    <Description>rept_input_user_report_apps</Description>
                </Argument>
                <Argument filterString="managerStatus == true" multi="true" name="managers" type="Identity">
                    <Description>rept_input_user_report_mgrs</Description>
                </Argument>
            </Inputs>
        </Signature>
    </TaskDefinition>

    <TaskDefinition name="Account Attributes Live Report" executor="sailpoint.reporting.LiveReportExecutor"
                    resultAction="Rename"
                    progressMode="String" subType="Identity and User Reports" template="true" type="LiveReport">
        <Description>A detailed view of each identity and the entitlements that they are assigned.</Description>
        <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessIdentityEntitlementReport"/>
        </RequiredRights>
        <Attributes>
          <Map>
             <entry key="report">
              <value>
                <LiveReport title="Account Attributes Report" disablePreview="true">
                  <InitializationRule>
                    <Reference class="sailpoint.object.Rule" name="Identity Report Form Customizer"/>
                  </InitializationRule>
                  <ReportForm>
                      <Reference class="sailpoint.object.Form" name="Account Attributes Live Options Form"/>
                  </ReportForm>
                  <DataSource objectType="Identity" type="Java"
                              dataSourceClass="sailpoint.reporting.datasource.AccountAttributesLiveReportDataSource">
                     <QueryParameters>
                      <Parameter argument="identities" property="id"/>
                      <Parameter argument="lastRefresh" property="lastRefresh" valueClass="daterange"/>
                      <Parameter argument="lastLogin" property="lastLogin" valueClass="daterange"/>
                      <Parameter argument="identityApplication" property="links.application.id"/>
                      <Parameter argument="capabilities" property="capabilities.id"/>
                      <Parameter argument="groupDefinitions">
                        <QueryScript>
                          <Source>
                            import sailpoint.object.*;
                            import sailpoint.reporting.*;
                            Filter f = ReportingLibrary.getGroupDefinitionFilter(context, value, false);
                            if(f!=null) {
                                queryOptions.addFilter(f);
                            }
                            return queryOptions;
                          </Source>
                        </QueryScript>
                      </Parameter>
                     </QueryParameters>
                  </DataSource>
                  <Columns>
                    <ReportColumnConfig field="identity" header="rept_entitlement_grid_name" property="name" sortable="true"/>
                    <ReportColumnConfig field="displayName" header="rept_entitlement_grid_display_name" property="displayName" sortable="true"/>
                    <ReportColumnConfig field="firstname" header="rept_entitlement_grid_first_name" property="firstname" sortable="true"/>
                    <ReportColumnConfig field="lastname" header="rept_entitlement_grid_last_name" property="lastname" sortable="true"/>
                    <ReportColumnConfig field="email" header="rept_entitlement_grid_email" property="email" sortable="true"/>
                    <ReportColumnConfig field="account" header="rept_entitlement_grid_account" sortable="false"/>
                    <ReportColumnConfig field="application" header="rept_entitlement_grid_application" sortable="false"/>
                    <ReportColumnConfig field="attribute" header="rept_entitlement_grid_entitlement_attribute" sortable="false"/>
                    <ReportColumnConfig field="value" header="rept_entitlement_grid_entitlement_value" sortable="false"/>
                  </Columns>
              </LiveReport>
            </value>
          </entry>
          </Map>
        </Attributes>
        <Signature>
            <Inputs>
                <Argument multi="true" name="groupDefinitions" type="string">
                    <Description>rept_input_user_report_group_definition</Description>
                </Argument>
                <Argument name="firstname" type="string">
                    <Description>rept_input_user_report_fname</Description>
                </Argument>
                <Argument name="lastname" type="string">
                    <Description>rept_input_user_report_lname</Description>
                </Argument>
                <Argument name="capabilities" type="string">
                    <Description>rept_input_user_report_capabilities</Description>
                </Argument>
                <Argument name="inactive" type="boolean">
                    <Description>rept_input_user_report_inactive</Description>
                </Argument>
                <Argument name="showScopes" type="boolean">
                    <Description>rept_input_user_report_scopes_caps</Description>
                </Argument>
                <Argument name="lastLogin" type="date">
                    <Description>rept_input_user_report_last_login</Description>
                </Argument>
                <Argument name="lastRefresh" type="date">
                    <Description>rept_input_user_report_last_refresh</Description>
                </Argument>
                <Argument name="email" type="string">
                    <Description>rept_input_user_report_email</Description>
                </Argument>
                <Argument multi="true" name="identityApplication" type="Application">
                    <Description>rept_input_user_report_apps</Description>
                </Argument>
                <Argument filterString="managerStatus == true" multi="true" name="managers" type="Identity">
                    <Description>rept_input_user_report_mgrs</Description>
                </Argument>

            </Inputs>
        </Signature>
    </TaskDefinition>

    <TaskDefinition name="Application Status Report" executor="sailpoint.reporting.LiveReportExecutor"
                      resultAction="Rename" progressMode="Percentage" subType="Application Reports"
                      template="true" type="LiveReport">
          <Description>Displays information about each application in detailed format.</Description>
          <RequiredRights>
            <Reference class="sailpoint.object.SPRight" name="FullAccessApplicationStatusReport"/>
          </RequiredRights>
          <Attributes>
            <Map>
              <entry key="report">
                <value>
                  <LiveReport title="Application Status Report">
                    <DataSource objectType="Application" type="Hql">
                      <Query>from Application a</Query>
                      <QueryScript>
                        <Source>
                        <![CDATA[
                              if (args.containsKey("applications")){
                                return query + " where a.id in (:applications)";
                              }
                              return query;
                          ]]>
                       </Source>
                      </QueryScript>
                      <QueryParameters>
                        <Parameter argument="applications"/>
                      </QueryParameters>
                    </DataSource>
                    <Columns>
                      <ReportColumnConfig field="name" header="rept_app_status_col_app_name" property="name"
                                          sortable="true"/>
                      <ReportColumnConfig field="numberAccounts" header="rept_app_status_col_num_accounts"
                                          property="(select count(id) from sailpoint.object.Link l where l.application.id = a.id)"
                                          sortable="false"/>
                      <ReportColumnConfig field="lastAgg" header="rept_app_status_col_last_agg" property="attributes"
                                          sortable="true">
                        <RenderScript>
                          <Source>
                            if(null != value){
                              return value.get("acctAggregationEnd");
                            }
                          </Source>
                        </RenderScript>
                      </ReportColumnConfig>
                      <ReportColumnConfig field="oldRefresh" header="rept_app_status_col_oldest_refresh"
                                          property="(select min(lastRefresh) from sailpoint.object.Link l where l.application.id = a.id)"
                                          sortable="false"/>
                      <ReportColumnConfig field="newRefresh" header="rept_app_status_col_newest_refresh"
                                          property="(select max(lastRefresh) from sailpoint.object.Link l where l.application.id = a.id)"
                                          sortable="false"/>
                      <ReportColumnConfig field="totalAssignments" header="rept_app_status_col_assignments"
                                          property="(select count(id) from sailpoint.object.IdentityEntitlement e where e.application.id = a.id and e.type is not null)" sortable="false"/>
                      <ReportColumnConfig field="totalAttributes" header="rept_app_status_col_entitlements" sortable="false" property="a.id">
                      <RenderScript>
                        <Source>
                          import sailpoint.object.*;
                          import sailpoint.tools.BrandingServiceFactory;
                          import java.util.*;
                          import sailpoint.tools.*;

                          /*
                            HQL does not allow us to count multiple distinct columns so use sql
                          */

                          String hql = "sql:select count(*) from (select distinct name, value, type from  "
                                  + BrandingServiceFactory.getService().brandTableName( "identity_entitlement" ) +
                                  " where type is not null and application = :applicationId) subquery";
                          Map params = new HashMap();
                          params.put("applicationId", value);
                          Iterator result = context.search(hql, params, new QueryOptions());
                          int count = 0;
                          while (result.hasNext()){
                              Integer val = Util.otoi(result.next());
                              count = val != null ? val.intValue() : 0;
                          }

                          return count;
                        </Source>
                      </RenderScript>
                    </ReportColumnConfig>
                    </Columns>
                </LiveReport>
              </value>
            </entry>
            </Map>
          </Attributes>
          <Signature>
            <Inputs>
                <Argument multi="true" name="applications" type="Application">
                    <Prompt>rept_app_status_label_apps</Prompt>
                   <Description>rept_app_status_help_apps</Description>
                </Argument>
            </Inputs>
        </Signature>
      </TaskDefinition>

</sailpoint>
