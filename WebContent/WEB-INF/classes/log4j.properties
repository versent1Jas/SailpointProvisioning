#
# (c) Copyright 2011 SailPoint Technologies, Inc., All Rights Reserved.
#
### direct log messages to stdout ###
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{ISO8601} %5p %t %c{4}:%L - %m%n

# this one is better for concurrency tests
#log4j.appender.stdout.layout.ConversionPattern=%t %5p %c{4}:%L - %m%n

### direct log messages to the db
log4j.appender.syslog=sailpoint.api.logging.SyslogAppender

# Below is an example of how to create a logger that writes to a file
# uncomment the following four lines, then add  the value "file" to 
# the log4j.rootLogger list
# 
#log4j.appender.file=org.apache.log4j.FileAppender
#log4j.appender.file.File=logs/sailpoint.log
#log4j.appender.file.layout=org.apache.log4j.PatternLayout
#log4j.appender.file.layout.ConversionPattern=%d{ISO8601} %5p %t %c{4}:%L - %m%n

# Below is an example of how to create a csv of metered data.
# uncomment the following 6 lines, as well as the logger.sailpoint.api.Meter line
# near the end of this file
#log4j.appender.meter=org.apache.log4j.RollingFileAppender
#log4j.appender.meter.File=/Library/Tomcat/logs/meter.log
#log4j.appender.meter.layout=org.apache.log4j.PatternLayout
#log4j.appender.meter.layout.ConversionPattern=%m%n
#log4j.appender.meter.MaxFileSize=1MB
#log4j.appender.meter.MaxBackupIndex=1 

### set default log levels and appender
### valid log levels in increasing order of severity are: 
###     trace, debug, info, warn, error, fatal, off
### trace is required to get method entry and exit logging
log4j.rootLogger=warn,stdout
#log4j.rootLogger=warn,file

# Suppress a warning about using a default configuration
log4j.logger.net.sf.ehcache=error

# Suppress "narrowing proxy" hibernate warning.
log4j.logger.org.hibernate.engine.StatefulPersistenceContext=error

# Suppress warnings about deprecated gadgets during import
log4j.logger.net.sf.jasperreports.engine.xml=error

# Note:  The following logging properties turn off warnings that result from our
#        combination of technologies (Tomahawk/Faceletes/A4J, etc.).  
#        Commenting them out will result in a slew of parser warnings.
#        If you don't want to clutter your logs with a bunch of useless warning
#        messages please leave these as they are.  
# Suppress warning message about Unparsable lastModified
log4j.logger.org.apache.myfaces.renderkit.html.util.MyFacesResourceLoader=error
# Suppress warning message about response not having <head> or <body> tags
log4j.logger.org.apache.myfaces.renderkit.html.util.DefaultAddResource=error
# Suppress warning message about invalid HTML inside javascript
#   See http://www.mail-archive.com/users@myfaces.apache.org/msg50391.html
log4j.logger.org.apache.myfaces.renderkit.html.util.ReducedHTMLParser=error

log4j.logger.sailpoint=warn, syslog

# make sure the syslog code doesn't try to call itself if there's a problem.
# NOTE: The additivity flag is critical here!
log4j.logger.sailpoint.api.logging.SyslogAppender=error, stdout
log4j.additivity.sailpoint.api.logging.SyslogAppender=false

log4j.logger.sailpoint.object.SyslogEvent=error, stdout
log4j.additivity.sailpoint.object.SyslogEvent=false

#log4j.logger.org.hibernate=info
#log4j.logger.org.hibernate=debug
#log4j.logger.org.hibernate=trace

#log4j.logger.org.hibernate.cache=trace
#log4j.logger.org.springframework=info
#log4j.logger.org.quartz=info

# Uncomment to log all SQL and prepared statement parameter values.
#log4j.logger.org.hibernate.SQL=debug
#log4j.logger.org.hibernate.type=trace

# Uncomment this to log all SailPoint generated HQL queries and
# query parameters. 
#log4j.logger.sailpoint.persistence.hql=trace

# Uncomment to view JSF logging
#log4j.logger.sailpoint.web.util.PhaseTracker=trace
#log4j.logger.com.sun.faces=trace
#log4j.logger.javax.faces=trace

# Uncomment to enable meter logging
#log4j.logger.sailpoint.api.Meter=info,meter

#log4j.logger.sailpoint.api.Aggregator=trace
#log4j.logger.sailpoint.api.CacheTracker=trace
#log4j.logger.sailpoint.api.Certificationer=info
#log4j.logger.sailpoint.api.certification.RemediationManager=info
#log4j.logger.sailpoint.api.CertificationPhaser=info
#log4j.logger.sailpoint.api.CorrelationModel=info
#log4j.logger.sailpoint.api.LockTracker=trace
#log4j.logger.sailpoint.api.ManagedAttributer=info
#log4j.logger.sailpoint.api.Provisioner=info
#log4j.logger.sailpoint.connector.SunIDMConnector=trace
#log4j.logger.sailpoint.integration.oim.OIMClient=info
#log4j.logger.sailpoint.object.ObjectConfig=info
#log4j.logger.sailpoint.persistence.DateType=info
#log4j.logger.sailpoint.persistence.DebugInterceptor=debug
#log4j.logger.sailpoint.persistence.HibernatePersistenceManager=info
#log4j.logger.sailpoint.persistence.HibernatePersistenceManager=trace
#log4j.logger.sailpoint.persistence.NewXmlType=info
#log4j.logger.sailpoint.persistence.PasswordType=info
#log4j.logger.sailpoint.persistence.SailPointInterceptor=info
#log4j.logger.sailpoint.persistence.XmlType=info
#log4j.logger.sailpoint.reporting=trace
#log4j.logger.sailpoint.server.BSFRuleRunner=trace
#log4j.logger.sailpoint.server.CacheService=info
#log4j.logger.sailpoint.server.Environment=trace
#log4j.logger.sailpoint.service.IIQRestService=info
#log4j.logger.sailpoint.task.IdentityRefreshExecutor=trace
#log4j.logger.sailpoint.task.RoleSynchronizer=info
#log4j.logger.sailpoint.web.util.TimingFilter=trace
#log4j.logger.sailpoint.server.HeartbeatService=trace
#log4j.logger.sailpoint.connector.sm=trace
